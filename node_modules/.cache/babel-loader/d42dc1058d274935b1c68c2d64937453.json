{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListCollectionsCursor = exports.ListCollectionsOperation = void 0;\nconst abstract_cursor_1 = require(\"../cursor/abstract_cursor\");\nconst utils_1 = require(\"../utils\");\nconst command_1 = require(\"./command\");\nconst execute_operation_1 = require(\"./execute_operation\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nclass ListCollectionsOperation extends command_1.CommandOperation {\n  constructor(db, filter, options) {\n    super(db, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n    this.authorizedCollections = !!this.options.authorizedCollections;\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n  execute(server, session, callback) {\n    return super.executeCommand(server, session, this.generateCommand((0, utils_1.maxWireVersion)(server)), callback);\n  }\n  /* This is here for the purpose of unit testing the final command that gets sent. */\n  generateCommand(wireVersion) {\n    const command = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? {\n        batchSize: this.batchSize\n      } : {},\n      nameOnly: this.nameOnly,\n      authorizedCollections: this.authorizedCollections\n    };\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (wireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n    return command;\n  }\n}\nexports.ListCollectionsOperation = ListCollectionsOperation;\n/** @public */\nclass ListCollectionsCursor extends abstract_cursor_1.AbstractCursor {\n  constructor(db, filter, options) {\n    super(db.s.client, db.s.namespace, options);\n    this.parent = db;\n    this.filter = filter;\n    this.options = options;\n  }\n  clone() {\n    return new ListCollectionsCursor(this.parent, this.filter, {\n      ...this.options,\n      ...this.cursorOptions\n    });\n  }\n  /** @internal */\n  _initialize(session, callback) {\n    const operation = new ListCollectionsOperation(this.parent, this.filter, {\n      ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(this.parent.s.client, operation, (err, response) => {\n      if (err || response == null) return callback(err);\n      // TODO: NODE-2882\n      callback(undefined, {\n        server: operation.server,\n        session,\n        response\n      });\n    });\n  }\n}\nexports.ListCollectionsCursor = ListCollectionsCursor;\n(0, operation_1.defineAspects)(ListCollectionsOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"mappings":";;;;;;AACA;AAIA;AACA;AACA;AACA;AAYA;AACA,MAAaA,wBAAyB,SAAQC,0BAA0B;EAQtEC,YAAYC,EAAM,EAAEC,MAAgB,EAAEC,OAAgC;IACpE,KAAK,CAACF,EAAE,EAAEE,OAAO,CAAC;IAElB,IAAI,CAACA,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;IAC5B,IAAI,CAACF,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,QAAQ,GAAG,CAAC,CAAC,IAAI,CAACD,OAAO,CAACC,QAAQ;IACvC,IAAI,CAACC,qBAAqB,GAAG,CAAC,CAAC,IAAI,CAACF,OAAO,CAACE,qBAAqB;IAEjE,IAAI,OAAO,IAAI,CAACF,OAAO,CAACG,SAAS,KAAK,QAAQ,EAAE;MAC9C,IAAI,CAACA,SAAS,GAAG,IAAI,CAACH,OAAO,CAACG,SAAS;;EAE3C;EAESC,OAAO,CACdC,MAAc,EACdC,OAAkC,EAClCC,QAA4B;IAE5B,OAAO,KAAK,CAACC,cAAc,CACzBH,MAAM,EACNC,OAAO,EACP,IAAI,CAACG,eAAe,CAAC,0BAAc,EAACJ,MAAM,CAAC,CAAC,EAC5CE,QAAQ,CACT;EACH;EAEA;EACAE,eAAe,CAACC,WAAmB;IACjC,MAAMC,OAAO,GAAa;MACxBC,eAAe,EAAE,CAAC;MAClBb,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBc,MAAM,EAAE,IAAI,CAACV,SAAS,GAAG;QAAEA,SAAS,EAAE,IAAI,CAACA;MAAS,CAAE,GAAG,EAAE;MAC3DF,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,qBAAqB,EAAE,IAAI,CAACA;KAC7B;IAED;IACA;IACA,IAAIQ,WAAW,IAAI,CAAC,IAAI,IAAI,CAACV,OAAO,CAACc,OAAO,KAAKC,SAAS,EAAE;MAC1DJ,OAAO,CAACG,OAAO,GAAG,IAAI,CAACd,OAAO,CAACc,OAAO;;IAGxC,OAAOH,OAAO;EAChB;;AApDFK;AAmEA;AACA,MAAaC,qBAIX,SAAQC,gCAAiB;EAKzBrB,YAAYC,EAAM,EAAEC,MAAgB,EAAEC,OAAgC;IACpE,KAAK,CAACF,EAAE,CAACqB,CAAC,CAACC,MAAM,EAAEtB,EAAE,CAACqB,CAAC,CAACE,SAAS,EAAErB,OAAO,CAAC;IAC3C,IAAI,CAACsB,MAAM,GAAGxB,EAAE;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,OAAO,GAAGA,OAAO;EACxB;EAEAuB,KAAK;IACH,OAAO,IAAIN,qBAAqB,CAAC,IAAI,CAACK,MAAM,EAAE,IAAI,CAACvB,MAAM,EAAE;MACzD,GAAG,IAAI,CAACC,OAAO;MACf,GAAG,IAAI,CAACwB;KACT,CAAC;EACJ;EAEA;EACAC,WAAW,CAACnB,OAAkC,EAAEC,QAAmC;IACjF,MAAMmB,SAAS,GAAG,IAAI/B,wBAAwB,CAAC,IAAI,CAAC2B,MAAM,EAAE,IAAI,CAACvB,MAAM,EAAE;MACvE,GAAG,IAAI,CAACyB,aAAa;MACrB,GAAG,IAAI,CAACxB,OAAO;MACfM;KACD,CAAC;IAEF,wCAAgB,EAAC,IAAI,CAACgB,MAAM,CAACH,CAAC,CAACC,MAAM,EAAEM,SAAS,EAAE,CAACC,GAAG,EAAEC,QAAQ,KAAI;MAClE,IAAID,GAAG,IAAIC,QAAQ,IAAI,IAAI,EAAE,OAAOrB,QAAQ,CAACoB,GAAG,CAAC;MAEjD;MACApB,QAAQ,CAACQ,SAAS,EAAE;QAAEV,MAAM,EAAEqB,SAAS,CAACrB,MAAM;QAAEC,OAAO;QAAEsB;MAAQ,CAAE,CAAC;IACtE,CAAC,CAAC;EACJ;;AArCFZ;AAwCA,6BAAa,EAACrB,wBAAwB,EAAE,CACtCkC,kBAAM,CAACC,cAAc,EACrBD,kBAAM,CAACE,SAAS,EAChBF,kBAAM,CAACG,eAAe,CACvB,CAAC","names":["ListCollectionsOperation","command_1","constructor","db","filter","options","nameOnly","authorizedCollections","batchSize","execute","server","session","callback","executeCommand","generateCommand","wireVersion","command","listCollections","cursor","comment","undefined","exports","ListCollectionsCursor","abstract_cursor_1","s","client","namespace","parent","clone","cursorOptions","_initialize","operation","err","response","operation_1","READ_OPERATION","RETRYABLE","CURSOR_CREATING"],"sources":["C:\\Users\\789bet\\node_modules\\mongodb\\src\\operations\\list_collections.ts"],"sourcesContent":["import type { Binary, Document } from '../bson';\nimport { AbstractCursor } from '../cursor/abstract_cursor';\nimport type { Db } from '../db';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\nimport { Callback, maxWireVersion } from '../utils';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { executeOperation, ExecutionResult } from './execute_operation';\nimport { Aspect, defineAspects } from './operation';\n\n/** @public */\nexport interface ListCollectionsOptions extends CommandOperationOptions {\n  /** Since 4.0: If true, will only return the collection name in the response, and will omit additional info */\n  nameOnly?: boolean;\n  /** Since 4.0: If true and nameOnly is true, allows a user without the required privilege (i.e. listCollections action on the database) to run the command when access control is enforced. */\n  authorizedCollections?: boolean;\n  /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */\n  batchSize?: number;\n}\n\n/** @internal */\nexport class ListCollectionsOperation extends CommandOperation<string[]> {\n  override options: ListCollectionsOptions;\n  db: Db;\n  filter: Document;\n  nameOnly: boolean;\n  authorizedCollections: boolean;\n  batchSize?: number;\n\n  constructor(db: Db, filter: Document, options?: ListCollectionsOptions) {\n    super(db, options);\n\n    this.options = options ?? {};\n    this.db = db;\n    this.filter = filter;\n    this.nameOnly = !!this.options.nameOnly;\n    this.authorizedCollections = !!this.options.authorizedCollections;\n\n    if (typeof this.options.batchSize === 'number') {\n      this.batchSize = this.options.batchSize;\n    }\n  }\n\n  override execute(\n    server: Server,\n    session: ClientSession | undefined,\n    callback: Callback<string[]>\n  ): void {\n    return super.executeCommand(\n      server,\n      session,\n      this.generateCommand(maxWireVersion(server)),\n      callback\n    );\n  }\n\n  /* This is here for the purpose of unit testing the final command that gets sent. */\n  generateCommand(wireVersion: number): Document {\n    const command: Document = {\n      listCollections: 1,\n      filter: this.filter,\n      cursor: this.batchSize ? { batchSize: this.batchSize } : {},\n      nameOnly: this.nameOnly,\n      authorizedCollections: this.authorizedCollections\n    };\n\n    // we check for undefined specifically here to allow falsy values\n    // eslint-disable-next-line no-restricted-syntax\n    if (wireVersion >= 9 && this.options.comment !== undefined) {\n      command.comment = this.options.comment;\n    }\n\n    return command;\n  }\n}\n\n/** @public */\nexport interface CollectionInfo extends Document {\n  name: string;\n  type?: string;\n  options?: Document;\n  info?: {\n    readOnly?: false;\n    uuid?: Binary;\n  };\n  idIndex?: Document;\n}\n\n/** @public */\nexport class ListCollectionsCursor<\n  T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n    | Pick<CollectionInfo, 'name' | 'type'>\n    | CollectionInfo\n> extends AbstractCursor<T> {\n  parent: Db;\n  filter: Document;\n  options?: ListCollectionsOptions;\n\n  constructor(db: Db, filter: Document, options?: ListCollectionsOptions) {\n    super(db.s.client, db.s.namespace, options);\n    this.parent = db;\n    this.filter = filter;\n    this.options = options;\n  }\n\n  clone(): ListCollectionsCursor<T> {\n    return new ListCollectionsCursor(this.parent, this.filter, {\n      ...this.options,\n      ...this.cursorOptions\n    });\n  }\n\n  /** @internal */\n  _initialize(session: ClientSession | undefined, callback: Callback<ExecutionResult>): void {\n    const operation = new ListCollectionsOperation(this.parent, this.filter, {\n      ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n\n    executeOperation(this.parent.s.client, operation, (err, response) => {\n      if (err || response == null) return callback(err);\n\n      // TODO: NODE-2882\n      callback(undefined, { server: operation.server, session, response });\n    });\n  }\n}\n\ndefineAspects(ListCollectionsOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.CURSOR_CREATING\n]);\n"]},"metadata":{},"sourceType":"script"}