{"ast":null,"code":"const spawn = require('child_process').spawn;\nmodule.exports = {\n  tree,\n  pidsForTree,\n  getStat\n};\nfunction getStat() {\n  return new Promise(resolve => {\n    const command = `ls /proc | grep -E '^[0-9]+$' | xargs -I{} cat /proc/{}/stat`;\n    const spawned = spawn('sh', ['-c', command], {\n      stdio: ['pipe', 'pipe', 'pipe']\n    });\n    var res = '';\n    spawned.stdout.on('data', data => res += data);\n    spawned.on('close', () => resolve(res));\n  });\n}\nfunction template(s) {\n  var stat = null;\n  // 'pid', 'comm', 'state', 'ppid', 'pgrp'\n  // %d     (%s)    %c       %d      %d\n  s.replace(/(\\d+) \\((.*?)\\)\\s(.+?)\\s(\\d+)\\s/g, (all, PID, COMMAND, STAT, PPID) => {\n    stat = {\n      PID,\n      COMMAND,\n      PPID,\n      STAT\n    };\n  });\n  return stat;\n}\nfunction tree(stats) {\n  const processes = stats.split('\\n').map(template).filter(Boolean);\n  return processes;\n}\nfunction pidsForTree(tree, pid) {\n  if (typeof pid === 'number') {\n    pid = pid.toString();\n  }\n  const parents = [pid];\n  const pids = [];\n  tree.forEach(proc => {\n    if (parents.indexOf(proc.PPID) !== -1) {\n      parents.push(proc.PID);\n      pids.push(proc);\n    }\n  });\n  return pids;\n}","map":{"version":3,"names":["spawn","require","module","exports","tree","pidsForTree","getStat","Promise","resolve","command","spawned","stdio","res","stdout","on","data","template","s","stat","replace","all","PID","COMMAND","STAT","PPID","stats","processes","split","map","filter","Boolean","pid","toString","parents","pids","forEach","proc","indexOf","push"],"sources":["C:/Users/789bet/node_modules/pstree.remy/lib/utils.js"],"sourcesContent":["const spawn = require('child_process').spawn;\n\nmodule.exports = { tree, pidsForTree, getStat };\n\nfunction getStat() {\n  return new Promise((resolve) => {\n    const command = `ls /proc | grep -E '^[0-9]+$' | xargs -I{} cat /proc/{}/stat`;\n    const spawned = spawn('sh', ['-c', command], {\n      stdio: ['pipe', 'pipe', 'pipe'],\n    });\n\n    var res = '';\n    spawned.stdout.on('data', (data) => (res += data));\n    spawned.on('close', () => resolve(res));\n  });\n}\n\nfunction template(s) {\n  var stat = null;\n  // 'pid', 'comm', 'state', 'ppid', 'pgrp'\n  // %d     (%s)    %c       %d      %d\n  s.replace(\n    /(\\d+) \\((.*?)\\)\\s(.+?)\\s(\\d+)\\s/g,\n    (all, PID, COMMAND, STAT, PPID) => {\n      stat = { PID, COMMAND, PPID, STAT };\n    }\n  );\n\n  return stat;\n}\n\nfunction tree(stats) {\n  const processes = stats.split('\\n').map(template).filter(Boolean);\n\n  return processes;\n}\n\nfunction pidsForTree(tree, pid) {\n  if (typeof pid === 'number') {\n    pid = pid.toString();\n  }\n  const parents = [pid];\n  const pids = [];\n\n  tree.forEach((proc) => {\n    if (parents.indexOf(proc.PPID) !== -1) {\n      parents.push(proc.PID);\n      pids.push(proc);\n    }\n  });\n\n  return pids;\n}\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAe,CAAC,CAACD,KAAK;AAE5CE,MAAM,CAACC,OAAO,GAAG;EAAEC,IAAI;EAAEC,WAAW;EAAEC;AAAQ,CAAC;AAE/C,SAASA,OAAO,GAAG;EACjB,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B,MAAMC,OAAO,GAAI,8DAA6D;IAC9E,MAAMC,OAAO,GAAGV,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,EAAES,OAAO,CAAC,EAAE;MAC3CE,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM;IAChC,CAAC,CAAC;IAEF,IAAIC,GAAG,GAAG,EAAE;IACZF,OAAO,CAACG,MAAM,CAACC,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAMH,GAAG,IAAIG,IAAK,CAAC;IAClDL,OAAO,CAACI,EAAE,CAAC,OAAO,EAAE,MAAMN,OAAO,CAACI,GAAG,CAAC,CAAC;EACzC,CAAC,CAAC;AACJ;AAEA,SAASI,QAAQ,CAACC,CAAC,EAAE;EACnB,IAAIC,IAAI,GAAG,IAAI;EACf;EACA;EACAD,CAAC,CAACE,OAAO,CACP,kCAAkC,EAClC,CAACC,GAAG,EAAEC,GAAG,EAAEC,OAAO,EAAEC,IAAI,EAAEC,IAAI,KAAK;IACjCN,IAAI,GAAG;MAAEG,GAAG;MAAEC,OAAO;MAAEE,IAAI;MAAED;IAAK,CAAC;EACrC,CAAC,CACF;EAED,OAAOL,IAAI;AACb;AAEA,SAASd,IAAI,CAACqB,KAAK,EAAE;EACnB,MAAMC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAACZ,QAAQ,CAAC,CAACa,MAAM,CAACC,OAAO,CAAC;EAEjE,OAAOJ,SAAS;AAClB;AAEA,SAASrB,WAAW,CAACD,IAAI,EAAE2B,GAAG,EAAE;EAC9B,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3BA,GAAG,GAAGA,GAAG,CAACC,QAAQ,EAAE;EACtB;EACA,MAAMC,OAAO,GAAG,CAACF,GAAG,CAAC;EACrB,MAAMG,IAAI,GAAG,EAAE;EAEf9B,IAAI,CAAC+B,OAAO,CAAEC,IAAI,IAAK;IACrB,IAAIH,OAAO,CAACI,OAAO,CAACD,IAAI,CAACZ,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;MACrCS,OAAO,CAACK,IAAI,CAACF,IAAI,CAACf,GAAG,CAAC;MACtBa,IAAI,CAACI,IAAI,CAACF,IAAI,CAAC;IACjB;EACF,CAAC,CAAC;EAEF,OAAOF,IAAI;AACb"},"metadata":{},"sourceType":"script"}