{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChangeStreamCursor = exports.ChangeStream = void 0;\nconst Denque = require(\"denque\");\nconst timers_1 = require(\"timers\");\nconst collection_1 = require(\"./collection\");\nconst constants_1 = require(\"./constants\");\nconst abstract_cursor_1 = require(\"./cursor/abstract_cursor\");\nconst db_1 = require(\"./db\");\nconst error_1 = require(\"./error\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst aggregate_1 = require(\"./operations/aggregate\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst utils_1 = require(\"./utils\");\n/** @internal */\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\nconst CHANGE_STREAM_OPTIONS = ['resumeAfter', 'startAfter', 'startAtOperationTime', 'fullDocument', 'fullDocumentBeforeChange', 'showExpandedEvents'];\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\nconst SELECTION_TIMEOUT = 30000;\nconst CHANGE_STREAM_EVENTS = [constants_1.RESUME_TOKEN_CHANGED, constants_1.END, constants_1.CLOSE];\nconst NO_RESUME_TOKEN_ERROR = 'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nclass ChangeStream extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(parent) {\n    let pipeline = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super();\n    this.pipeline = pipeline;\n    this.options = options;\n    if (parent instanceof collection_1.Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof db_1.Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof mongo_client_1.MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new error_1.MongoChangeStreamError('Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient');\n    }\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n    this[kResumeQueue] = new Denque();\n    // Create contained Change Stream cursor\n    this.cursor = this._createChangeStreamCursor(options);\n    this[kClosed] = false;\n    this[kMode] = false;\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n    this.on('removeListener', eventName => {\n      var _a;\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        (_a = this[kCursorStream]) === null || _a === void 0 ? void 0 : _a.removeAllListeners('data');\n      }\n    });\n  }\n  /** @internal */\n  get cursorStream() {\n    return this[kCursorStream];\n  }\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken() {\n    var _a;\n    return (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.resumeToken;\n  }\n  hasNext(callback) {\n    this._setIsIterator();\n    return (0, utils_1.maybePromise)(callback, cb => {\n      this._getCursor((err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        cursor.hasNext(cb);\n      });\n    });\n  }\n  next(callback) {\n    this._setIsIterator();\n    return (0, utils_1.maybePromise)(callback, cb => {\n      this._getCursor((err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n            this._processError(error, cb);\n            return;\n          }\n          this._processNewChange(change !== null && change !== void 0 ? change : null, cb);\n        });\n      });\n    });\n  }\n  /** Is the cursor closed */\n  get closed() {\n    var _a, _b;\n    return this[kClosed] || ((_b = (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : false);\n  }\n  /** Close the Change Stream */\n  close(callback) {\n    this[kClosed] = true;\n    return (0, utils_1.maybePromise)(callback, cb => {\n      if (!this.cursor) {\n        return cb();\n      }\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        this._endStream();\n        this.cursor = undefined;\n        return cb(err);\n      });\n    });\n  }\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @throws MongoDriverError if this.cursor is undefined\n   */\n  stream(options) {\n    this.streamOptions = options;\n    if (!this.cursor) throw new error_1.MongoChangeStreamError(NO_CURSOR_ERROR);\n    return this.cursor.stream(options);\n  }\n  tryNext(callback) {\n    this._setIsIterator();\n    return (0, utils_1.maybePromise)(callback, cb => {\n      this._getCursor((err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        return cursor.tryNext(cb);\n      });\n    });\n  }\n  /** @internal */\n  _setIsEmitter() {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an EventEmitter after being used as an iterator');\n    }\n    this[kMode] = 'emitter';\n  }\n  /** @internal */\n  _setIsIterator() {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new error_1.MongoAPIError('ChangeStream cannot be used as an iterator after being used as an EventEmitter');\n    }\n    this[kMode] = 'iterator';\n  }\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n  _createChangeStreamCursor(options) {\n    const changeStreamStageOptions = (0, utils_1.filterOptions)(options, CHANGE_STREAM_OPTIONS);\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{\n      $changeStream: changeStreamStageOptions\n    }, ...this.pipeline];\n    const client = this.type === CHANGE_DOMAIN_TYPES.CLUSTER ? this.parent : this.type === CHANGE_DOMAIN_TYPES.DATABASE ? this.parent.s.client : this.type === CHANGE_DOMAIN_TYPES.COLLECTION ? this.parent.s.db.s.client : null;\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new error_1.MongoRuntimeError(`Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`);\n    }\n    const changeStreamCursor = new ChangeStreamCursor(client, this.namespace, pipeline, options);\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n    return changeStreamCursor;\n  }\n  /**\n   * This method performs a basic server selection loop, satisfying the requirements of\n   * ChangeStream resumability until the new SDAM layer can be used.\n   * @internal\n   */\n  _waitForTopologyConnected(topology, options, callback) {\n    (0, timers_1.setTimeout)(() => {\n      if (options && options.start == null) {\n        options.start = (0, utils_1.now)();\n      }\n      const start = options.start || (0, utils_1.now)();\n      const timeout = options.timeout || SELECTION_TIMEOUT;\n      if (topology.isConnected()) {\n        return callback();\n      }\n      if ((0, utils_1.calculateDurationInMs)(start) > timeout) {\n        // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n        return callback(new error_1.MongoRuntimeError('Timed out waiting for connection'));\n      }\n      this._waitForTopologyConnected(topology, options, callback);\n    }, 500); // this is an arbitrary wait time to allow SDAM to transition\n  }\n  /** @internal */\n  _closeWithError(error, callback) {\n    if (!callback) {\n      this.emit(ChangeStream.ERROR, error);\n    }\n    this.close(() => callback && callback(error));\n  }\n  /** @internal */\n  _streamEvents(cursor) {\n    var _a;\n    this._setIsEmitter();\n    const stream = (_a = this[kCursorStream]) !== null && _a !== void 0 ? _a : cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => this._processNewChange(change));\n    stream.on('error', error => this._processError(error));\n  }\n  /** @internal */\n  _endStream() {\n    const cursorStream = this[kCursorStream];\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n    this[kCursorStream] = undefined;\n  }\n  /** @internal */\n  _processNewChange(change, callback) {\n    var _a;\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      return;\n    }\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      return this._closeWithError(new error_1.MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n    }\n    if (change && !change._id) {\n      return this._closeWithError(new error_1.MongoChangeStreamError(NO_RESUME_TOKEN_ERROR), callback);\n    }\n    // cache the resume token\n    (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.cacheResumeToken(change._id);\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    this.options.startAtOperationTime = undefined;\n    // Return the change\n    if (!callback) return this.emit(ChangeStream.CHANGE, change);\n    return callback(undefined, change);\n  }\n  /** @internal */\n  _processError(error, callback) {\n    const cursor = this.cursor;\n    // If the change stream has been closed explicitly, do not process error.\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      if (callback) callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      return;\n    }\n    // if the resume succeeds, continue with the new cursor\n    const resumeWithCursor = newCursor => {\n      this.cursor = newCursor;\n      this._processResumeQueue();\n    };\n    // otherwise, raise an error and close the change stream\n    const unresumableError = err => {\n      if (!callback) {\n        this.emit(ChangeStream.ERROR, err);\n      }\n      this.close(() => this._processResumeQueue(err));\n    };\n    if (cursor && (0, error_1.isResumableError)(error, (0, utils_1.maxWireVersion)(cursor.server))) {\n      this.cursor = undefined;\n      // stop listening to all events from old cursor\n      this._endStream();\n      // close internal cursor, ignore errors\n      cursor.close();\n      const topology = (0, utils_1.getTopology)(this.parent);\n      this._waitForTopologyConnected(topology, {\n        readPreference: cursor.readPreference\n      }, err => {\n        // if the topology can't reconnect, close the stream\n        if (err) return unresumableError(err);\n        // create a new cursor, preserving the old cursor's options\n        const newCursor = this._createChangeStreamCursor(cursor.resumeOptions);\n        // attempt to continue in emitter mode\n        if (!callback) return resumeWithCursor(newCursor);\n        // attempt to continue in iterator mode\n        newCursor.hasNext(err => {\n          // if there's an error immediately after resuming, close the stream\n          if (err) return unresumableError(err);\n          resumeWithCursor(newCursor);\n        });\n      });\n      return;\n    }\n    // if initial error wasn't resumable, raise an error and close the change stream\n    return this._closeWithError(error, callback);\n  }\n  /** @internal */\n  _getCursor(callback) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      callback(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      return;\n    }\n    // if a cursor exists and it is open, return it\n    if (this.cursor) {\n      callback(undefined, this.cursor);\n      return;\n    }\n    // no cursor, queue callback until topology reconnects\n    this[kResumeQueue].push(callback);\n  }\n  /**\n   * Drain the resume queue when a new has become available\n   * @internal\n   *\n   * @param error - error getting a new cursor\n   */\n  _processResumeQueue(error) {\n    var _a;\n    while (this[kResumeQueue].length) {\n      const request = this[kResumeQueue].pop();\n      if (!request) break; // Should never occur but TS can't use the length check in the while condition\n      if (!error) {\n        if (this[kClosed]) {\n          // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n          request(new error_1.MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n          return;\n        }\n        if (!this.cursor) {\n          request(new error_1.MongoChangeStreamError(NO_CURSOR_ERROR));\n          return;\n        }\n      }\n      request(error, (_a = this.cursor) !== null && _a !== void 0 ? _a : undefined);\n    }\n  }\n}\nexports.ChangeStream = ChangeStream;\n/** @event */\nChangeStream.RESPONSE = constants_1.RESPONSE;\n/** @event */\nChangeStream.MORE = constants_1.MORE;\n/** @event */\nChangeStream.INIT = constants_1.INIT;\n/** @event */\nChangeStream.CLOSE = constants_1.CLOSE;\n/**\n * Fired for each new matching change in the specified namespace. Attaching a `change`\n * event listener to a Change Stream will switch the stream into flowing mode. Data will\n * then be passed as soon as it is available.\n * @event\n */\nChangeStream.CHANGE = constants_1.CHANGE;\n/** @event */\nChangeStream.END = constants_1.END;\n/** @event */\nChangeStream.ERROR = constants_1.ERROR;\n/**\n * Emitted each time the change stream stores a new resume token.\n * @event\n */\nChangeStream.RESUME_TOKEN_CHANGED = constants_1.RESUME_TOKEN_CHANGED;\n/** @internal */\nclass ChangeStreamCursor extends abstract_cursor_1.AbstractCursor {\n  constructor(client, namespace) {\n    let pipeline = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(client, namespace, options);\n    this.pipeline = pipeline;\n    this.options = options;\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n  set resumeToken(token) {\n    this._resumeToken = token;\n    this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n  }\n  get resumeToken() {\n    return this._resumeToken;\n  }\n  get resumeOptions() {\n    const options = {\n      ...this.options\n    };\n    for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime']) {\n      delete options[key];\n    }\n    if (this.resumeToken != null) {\n      if (this.options.startAfter && !this.hasReceived) {\n        options.startAfter = this.resumeToken;\n      } else {\n        options.resumeAfter = this.resumeToken;\n      }\n    } else if (this.startAtOperationTime != null && (0, utils_1.maxWireVersion)(this.server) >= 7) {\n      options.startAtOperationTime = this.startAtOperationTime;\n    }\n    return options;\n  }\n  cacheResumeToken(resumeToken) {\n    if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n      this.resumeToken = this.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n    this.hasReceived = true;\n  }\n  _processBatch(response) {\n    const cursor = response.cursor;\n    if (cursor.postBatchResumeToken) {\n      this.postBatchResumeToken = response.cursor.postBatchResumeToken;\n      const batch = 'firstBatch' in response.cursor ? response.cursor.firstBatch : response.cursor.nextBatch;\n      if (batch.length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n  clone() {\n    return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, {\n      ...this.cursorOptions\n    });\n  }\n  _initialize(session, callback) {\n    const aggregateOperation = new aggregate_1.AggregateOperation(this.namespace, this.pipeline, {\n      ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n    (0, execute_operation_1.executeOperation)(session.client, aggregateOperation, (err, response) => {\n      if (err || response == null) {\n        return callback(err);\n      }\n      const server = aggregateOperation.server;\n      if (this.startAtOperationTime == null && this.resumeAfter == null && this.startAfter == null && (0, utils_1.maxWireVersion)(server) >= 7) {\n        this.startAtOperationTime = response.operationTime;\n      }\n      this._processBatch(response);\n      this.emit(ChangeStream.INIT, response);\n      this.emit(ChangeStream.RESPONSE);\n      // TODO: NODE-2882\n      callback(undefined, {\n        server,\n        session,\n        response\n      });\n    });\n  }\n  _getMore(batchSize, callback) {\n    super._getMore(batchSize, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n      this._processBatch(response);\n      this.emit(ChangeStream.MORE, response);\n      this.emit(ChangeStream.RESPONSE);\n      callback(err, response);\n    });\n  }\n}\nexports.ChangeStreamCursor = ChangeStreamCursor;","map":{"version":3,"mappings":"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","names":["kResumeQueue","Symbol","kCursorStream","kClosed","kMode","CHANGE_STREAM_OPTIONS","CHANGE_DOMAIN_TYPES","COLLECTION","DATABASE","CLUSTER","SELECTION_TIMEOUT","CHANGE_STREAM_EVENTS","constants_1","NO_RESUME_TOKEN_ERROR","NO_CURSOR_ERROR","CHANGESTREAM_CLOSED_ERROR","ChangeStream","mongo_types_1","constructor","parent","pipeline","options","collection_1","type","db_1","mongo_client_1","error_1","namespace","s","readPreference","Denque","cursor","_createChangeStreamCursor","on","eventName","listenerCount","_streamEvents","removeAllListeners","cursorStream","resumeToken","hasNext","callback","_setIsIterator","cb","_getCursor","err","next","error","change","push","_processError","_processNewChange","closed","close","_endStream","undefined","stream","streamOptions","tryNext","_setIsEmitter","changeStreamStageOptions","allChangesForCluster","$changeStream","client","db","toString","changeStreamCursor","ChangeStreamCursor","event","e","emit","CHANGE","_waitForTopologyConnected","topology","start","timeout","isConnected","_closeWithError","ERROR","forEach","destroy","_id","cacheResumeToken","startAtOperationTime","resumeWithCursor","newCursor","_processResumeQueue","unresumableError","server","resumeOptions","length","request","pop","exports","abstract_cursor_1","_resumeToken","startAfter","resumeAfter","token","RESUME_TOKEN_CHANGED","key","hasReceived","bufferedCount","postBatchResumeToken","_processBatch","response","batch","firstBatch","nextBatch","clone","cursorOptions","_initialize","session","aggregateOperation","aggregate_1","operationTime","INIT","RESPONSE","_getMore","batchSize","MORE"],"sources":["C:\\Users\\789bet\\node_modules\\mongodb\\src\\change_stream.ts"],"sourcesContent":["import Denque = require('denque');\nimport type { Readable } from 'stream';\nimport { setTimeout } from 'timers';\n\nimport type { Binary, Document, Long, Timestamp } from './bson';\nimport { Collection } from './collection';\nimport { CHANGE, CLOSE, END, ERROR, INIT, MORE, RESPONSE, RESUME_TOKEN_CHANGED } from './constants';\nimport {\n  AbstractCursor,\n  AbstractCursorEvents,\n  AbstractCursorOptions,\n  CursorStreamOptions\n} from './cursor/abstract_cursor';\nimport { Db } from './db';\nimport {\n  AnyError,\n  isResumableError,\n  MongoAPIError,\n  MongoChangeStreamError,\n  MongoRuntimeError\n} from './error';\nimport { MongoClient } from './mongo_client';\nimport { InferIdType, TODO_NODE_3286, TypedEventEmitter } from './mongo_types';\nimport { AggregateOperation, AggregateOptions } from './operations/aggregate';\nimport type { CollationOptions, OperationParent } from './operations/command';\nimport { executeOperation, ExecutionResult } from './operations/execute_operation';\nimport type { ReadPreference } from './read_preference';\nimport type { Topology } from './sdam/topology';\nimport type { ClientSession, ServerSessionId } from './sessions';\nimport {\n  calculateDurationInMs,\n  Callback,\n  filterOptions,\n  getTopology,\n  maxWireVersion,\n  maybePromise,\n  MongoDBNamespace,\n  now\n} from './utils';\n\n/** @internal */\nconst kResumeQueue = Symbol('resumeQueue');\n/** @internal */\nconst kCursorStream = Symbol('cursorStream');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kMode = Symbol('mode');\n\nconst CHANGE_STREAM_OPTIONS = [\n  'resumeAfter',\n  'startAfter',\n  'startAtOperationTime',\n  'fullDocument',\n  'fullDocumentBeforeChange',\n  'showExpandedEvents'\n] as const;\n\nconst CHANGE_DOMAIN_TYPES = {\n  COLLECTION: Symbol('Collection'),\n  DATABASE: Symbol('Database'),\n  CLUSTER: Symbol('Cluster')\n};\n\ninterface TopologyWaitOptions {\n  start?: number;\n  timeout?: number;\n  readPreference?: ReadPreference;\n}\n\nconst SELECTION_TIMEOUT = 30000;\n\nconst CHANGE_STREAM_EVENTS = [RESUME_TOKEN_CHANGED, END, CLOSE];\n\nconst NO_RESUME_TOKEN_ERROR =\n  'A change stream document has been received that lacks a resume token (_id).';\nconst NO_CURSOR_ERROR = 'ChangeStream has no cursor';\nconst CHANGESTREAM_CLOSED_ERROR = 'ChangeStream is closed';\n\n/**\n * @public\n * @deprecated Please use the ChangeStreamCursorOptions type instead.\n */\nexport interface ResumeOptions {\n  startAtOperationTime?: Timestamp;\n  batchSize?: number;\n  maxAwaitTimeMS?: number;\n  collation?: CollationOptions;\n  readPreference?: ReadPreference;\n  resumeAfter?: ResumeToken;\n  startAfter?: ResumeToken;\n  fullDocument?: string;\n}\n\n/**\n * Represents the logical starting point for a new ChangeStream or resuming a ChangeStream on the server.\n * @see https://www.mongodb.com/docs/manual/changeStreams/#std-label-change-stream-resume\n * @public\n */\nexport type ResumeToken = unknown;\n\n/**\n * Represents a specific point in time on a server. Can be retrieved by using `db.command()`\n * @public\n * @see https://docs.mongodb.com/manual/reference/method/db.runCommand/#response\n */\nexport type OperationTime = Timestamp;\n\n/** @public */\nexport interface PipeOptions {\n  end?: boolean;\n}\n\n/** @internal */\nexport type ChangeStreamAggregateRawResult<TChange> = {\n  $clusterTime: { clusterTime: Timestamp };\n  cursor: {\n    postBatchResumeToken: ResumeToken;\n    ns: string;\n    id: number | Long;\n  } & ({ firstBatch: TChange[] } | { nextBatch: TChange[] });\n  ok: 1;\n  operationTime: Timestamp;\n};\n\n/**\n * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @public\n */\nexport interface ChangeStreamOptions extends AggregateOptions {\n  /**\n   * Allowed values: 'updateLookup', 'whenAvailable', 'required'.\n   *\n   * When set to 'updateLookup', the change notification for partial updates\n   * will include both a delta describing the changes to the document as well\n   * as a copy of the entire document that was changed from some time after\n   * the change occurred.\n   *\n   * When set to 'whenAvailable', configures the change stream to return the\n   * post-image of the modified document for replace and update change events\n   * if the post-image for this event is available.\n   *\n   * When set to 'required', the same behavior as 'whenAvailable' except that\n   * an error is raised if the post-image is not available.\n   */\n  fullDocument?: string;\n\n  /**\n   * Allowed values: 'whenAvailable', 'required', 'off'.\n   *\n   * The default is to not send a value, which is equivalent to 'off'.\n   *\n   * When set to 'whenAvailable', configures the change stream to return the\n   * pre-image of the modified document for replace, update, and delete change\n   * events if it is available.\n   *\n   * When set to 'required', the same behavior as 'whenAvailable' except that\n   * an error is raised if the pre-image is not available.\n   */\n  fullDocumentBeforeChange?: string;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */\n  maxAwaitTimeMS?: number;\n  /**\n   * Allows you to start a changeStream after a specified event.\n   * @see https://docs.mongodb.com/manual/changeStreams/#resumeafter-for-change-streams\n   */\n  resumeAfter?: ResumeToken;\n  /**\n   * Similar to resumeAfter, but will allow you to start after an invalidated event.\n   * @see https://docs.mongodb.com/manual/changeStreams/#startafter-for-change-streams\n   */\n  startAfter?: ResumeToken;\n  /** Will start the changeStream after the specified operationTime. */\n  startAtOperationTime?: OperationTime;\n  /**\n   * The number of documents to return per batch.\n   * @see https://docs.mongodb.com/manual/reference/command/aggregate\n   */\n  batchSize?: number;\n\n  /**\n   * When enabled, configures the change stream to include extra change events.\n   *\n   * - createIndexes\n   * - dropIndexes\n   * - modify\n   * - create\n   * - shardCollection\n   * - reshardCollection\n   * - refineCollectionShardKey\n   */\n  showExpandedEvents?: boolean;\n}\n\n/** @public */\nexport interface ChangeStreamNameSpace {\n  db: string;\n  coll: string;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentKey<TSchema extends Document = Document> {\n  /**\n   * For unsharded collections this contains a single field `_id`.\n   * For sharded collections, this will contain all the components of the shard key\n   */\n  documentKey: { _id: InferIdType<TSchema>; [shardKey: string]: any };\n}\n\n/** @public */\nexport interface ChangeStreamDocumentCommon {\n  /**\n   * The id functions as an opaque token for use when resuming an interrupted\n   * change stream.\n   */\n  _id: ResumeToken;\n  /**\n   * The timestamp from the oplog entry associated with the event.\n   * For events that happened as part of a multi-document transaction, the associated change stream\n   * notifications will have the same clusterTime value, namely the time when the transaction was committed.\n   * On a sharded cluster, events that occur on different shards can have the same clusterTime but be\n   * associated with different transactions or even not be associated with any transaction.\n   * To identify events for a single transaction, you can use the combination of lsid and txnNumber in the change stream event document.\n   */\n  clusterTime?: Timestamp;\n\n  /**\n   * The transaction number.\n   * Only present if the operation is part of a multi-document transaction.\n   *\n   * **NOTE:** txnNumber can be a Long if promoteLongs is set to false\n   */\n  txnNumber?: number;\n\n  /**\n   * The identifier for the session associated with the transaction.\n   * Only present if the operation is part of a multi-document transaction.\n   */\n  lsid?: ServerSessionId;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentCollectionUUID {\n  /**\n   * The UUID (Binary subtype 4) of the collection that the operation was performed on.\n   *\n   * Only present when the `showExpandedEvents` flag is enabled.\n   *\n   * **NOTE:** collectionUUID will be converted to a NodeJS Buffer if the promoteBuffers\n   *    flag is enabled.\n   *\n   * @since 6.1.0\n   */\n  collectionUUID: Binary;\n}\n\n/** @public */\nexport interface ChangeStreamDocumentOperationDescription {\n  /**\n   * An description of the operation.\n   *\n   * Only present when the `showExpandedEvents` flag is enabled.\n   *\n   * @since 6.1.0\n   */\n  operationDescription?: Document;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#insert-event\n */\nexport interface ChangeStreamInsertDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'insert';\n  /** This key will contain the document being inserted */\n  fullDocument: TSchema;\n  /** Namespace the insert event occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#update-event\n */\nexport interface ChangeStreamUpdateDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'update';\n  /**\n   * This is only set if `fullDocument` is set to `'updateLookup'`\n   * Contains the point-in-time post-image of the modified document if the\n   * post-image is available and either 'required' or 'whenAvailable' was\n   * specified for the 'fullDocument' option when creating the change stream.\n   */\n  fullDocument?: TSchema;\n  /** Contains a description of updated and removed fields in this operation */\n  updateDescription: UpdateDescription<TSchema>;\n  /** Namespace the update event occured on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#replace-event\n */\nexport interface ChangeStreamReplaceDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema> {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'replace';\n  /** The fullDocument of a replace event represents the document after the insert of the replacement document */\n  fullDocument: TSchema;\n  /** Namespace the replace event occured on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#delete-event\n */\nexport interface ChangeStreamDeleteDocument<TSchema extends Document = Document>\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentKey<TSchema>,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'delete';\n  /** Namespace the delete event occured on */\n  ns: ChangeStreamNameSpace;\n  /**\n   * Contains the pre-image of the modified or deleted document if the\n   * pre-image is available for the change event and either 'required' or\n   * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n   * when creating the change stream. If 'whenAvailable' was specified but the\n   * pre-image is unavailable, this will be explicitly set to null.\n   */\n  fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#drop-event\n */\nexport interface ChangeStreamDropDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'drop';\n  /** Namespace the drop event occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#rename-event\n */\nexport interface ChangeStreamRenameDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'rename';\n  /** The new name for the `ns.coll` collection */\n  to: { db: string; coll: string };\n  /** The \"from\" namespace that the rename occured on */\n  ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#dropdatabase-event\n */\nexport interface ChangeStreamDropDatabaseDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'dropDatabase';\n  /** The database dropped */\n  ns: { db: string };\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#invalidate-event\n */\nexport interface ChangeStreamInvalidateDocument extends ChangeStreamDocumentCommon {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'invalidate';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamCreateIndexDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'createIndexes';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamDropIndexDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'dropIndexes';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamCollModDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'modify';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamCreateDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'create';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamShardCollectionDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'shardCollection';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamReshardCollectionDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'reshardCollection';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/\n */\nexport interface ChangeStreamRefineCollectionShardKeyDocument\n  extends ChangeStreamDocumentCommon,\n    ChangeStreamDocumentCollectionUUID,\n    ChangeStreamDocumentOperationDescription {\n  /** Describes the type of operation represented in this change notification */\n  operationType: 'refineCollectionShardKey';\n}\n\n/** @public */\nexport type ChangeStreamDocument<TSchema extends Document = Document> =\n  | ChangeStreamInsertDocument<TSchema>\n  | ChangeStreamUpdateDocument<TSchema>\n  | ChangeStreamReplaceDocument<TSchema>\n  | ChangeStreamDeleteDocument<TSchema>\n  | ChangeStreamDropDocument\n  | ChangeStreamRenameDocument\n  | ChangeStreamDropDatabaseDocument\n  | ChangeStreamInvalidateDocument\n  | ChangeStreamCreateIndexDocument\n  | ChangeStreamCreateDocument\n  | ChangeStreamCollModDocument\n  | ChangeStreamDropIndexDocument\n  | ChangeStreamShardCollectionDocument\n  | ChangeStreamReshardCollectionDocument\n  | ChangeStreamRefineCollectionShardKeyDocument;\n\n/** @public */\nexport interface UpdateDescription<TSchema extends Document = Document> {\n  /**\n   * A document containing key:value pairs of names of the fields that were\n   * changed, and the new value for those fields.\n   */\n  updatedFields?: Partial<TSchema>;\n\n  /**\n   * An array of field names that were removed from the document.\n   */\n  removedFields?: string[];\n\n  /**\n   * An array of documents which record array truncations performed with pipeline-based updates using one or more of the following stages:\n   * - $addFields\n   * - $set\n   * - $replaceRoot\n   * - $replaceWith\n   */\n  truncatedArrays?: Array<{\n    /** The name of the truncated field. */\n    field: string;\n    /** The number of elements in the truncated array. */\n    newSize: number;\n  }>;\n}\n\n/** @public */\nexport type ChangeStreamEvents<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> = {\n  resumeTokenChanged(token: ResumeToken): void;\n  init(response: any): void;\n  more(response?: any): void;\n  response(): void;\n  end(): void;\n  error(error: Error): void;\n  change(change: TChange): void;\n} & AbstractCursorEvents;\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nexport class ChangeStream<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> extends TypedEventEmitter<ChangeStreamEvents<TSchema, TChange>> {\n  pipeline: Document[];\n  options: ChangeStreamOptions;\n  parent: MongoClient | Db | Collection;\n  namespace: MongoDBNamespace;\n  type: symbol;\n  /** @internal */\n  cursor: ChangeStreamCursor<TSchema, TChange> | undefined;\n  streamOptions?: CursorStreamOptions;\n  /** @internal */\n  [kResumeQueue]: Denque<Callback<ChangeStreamCursor<TSchema, TChange>>>;\n  /** @internal */\n  [kCursorStream]?: Readable & AsyncIterable<TChange>;\n  /** @internal */\n  [kClosed]: boolean;\n  /** @internal */\n  [kMode]: false | 'iterator' | 'emitter';\n\n  /** @event */\n  static readonly RESPONSE = RESPONSE;\n  /** @event */\n  static readonly MORE = MORE;\n  /** @event */\n  static readonly INIT = INIT;\n  /** @event */\n  static readonly CLOSE = CLOSE;\n  /**\n   * Fired for each new matching change in the specified namespace. Attaching a `change`\n   * event listener to a Change Stream will switch the stream into flowing mode. Data will\n   * then be passed as soon as it is available.\n   * @event\n   */\n  static readonly CHANGE = CHANGE;\n  /** @event */\n  static readonly END = END;\n  /** @event */\n  static readonly ERROR = ERROR;\n  /**\n   * Emitted each time the change stream stores a new resume token.\n   * @event\n   */\n  static readonly RESUME_TOKEN_CHANGED = RESUME_TOKEN_CHANGED;\n\n  /**\n   * @internal\n   *\n   * @param parent - The parent object that created this change stream\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents\n   */\n  constructor(\n    parent: OperationParent,\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ) {\n    super();\n\n    this.pipeline = pipeline;\n    this.options = options;\n\n    if (parent instanceof Collection) {\n      this.type = CHANGE_DOMAIN_TYPES.COLLECTION;\n    } else if (parent instanceof Db) {\n      this.type = CHANGE_DOMAIN_TYPES.DATABASE;\n    } else if (parent instanceof MongoClient) {\n      this.type = CHANGE_DOMAIN_TYPES.CLUSTER;\n    } else {\n      throw new MongoChangeStreamError(\n        'Parent provided to ChangeStream constructor must be an instance of Collection, Db, or MongoClient'\n      );\n    }\n\n    this.parent = parent;\n    this.namespace = parent.s.namespace;\n    if (!this.options.readPreference && parent.readPreference) {\n      this.options.readPreference = parent.readPreference;\n    }\n\n    this[kResumeQueue] = new Denque();\n\n    // Create contained Change Stream cursor\n    this.cursor = this._createChangeStreamCursor(options);\n\n    this[kClosed] = false;\n    this[kMode] = false;\n\n    // Listen for any `change` listeners being added to ChangeStream\n    this.on('newListener', eventName => {\n      if (eventName === 'change' && this.cursor && this.listenerCount('change') === 0) {\n        this._streamEvents(this.cursor);\n      }\n    });\n\n    this.on('removeListener', eventName => {\n      if (eventName === 'change' && this.listenerCount('change') === 0 && this.cursor) {\n        this[kCursorStream]?.removeAllListeners('data');\n      }\n    });\n  }\n\n  /** @internal */\n  get cursorStream(): (Readable & AsyncIterable<TChange>) | undefined {\n    return this[kCursorStream];\n  }\n\n  /** The cached resume token that is used to resume after the most recently returned change. */\n  get resumeToken(): ResumeToken {\n    return this.cursor?.resumeToken;\n  }\n\n  /** Check if there is any document still available in the Change Stream */\n  hasNext(): Promise<boolean>;\n  hasNext(callback: Callback<boolean>): void;\n  hasNext(callback?: Callback): Promise<boolean> | void {\n    this._setIsIterator();\n    return maybePromise(callback, cb => {\n      this._getCursor((err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        cursor.hasNext(cb);\n      });\n    });\n  }\n\n  /** Get the next available document from the Change Stream. */\n  next(): Promise<TChange>;\n  next(callback: Callback<TChange>): void;\n  next(callback?: Callback<TChange>): Promise<TChange> | void {\n    this._setIsIterator();\n    return maybePromise(callback, cb => {\n      this._getCursor((err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        cursor.next((error, change) => {\n          if (error) {\n            this[kResumeQueue].push(() => this.next(cb));\n            this._processError(error, cb);\n            return;\n          }\n          this._processNewChange(change ?? null, cb);\n        });\n      });\n    });\n  }\n\n  /** Is the cursor closed */\n  get closed(): boolean {\n    return this[kClosed] || (this.cursor?.closed ?? false);\n  }\n\n  /** Close the Change Stream */\n  close(callback?: Callback): Promise<void> | void {\n    this[kClosed] = true;\n\n    return maybePromise(callback, cb => {\n      if (!this.cursor) {\n        return cb();\n      }\n\n      const cursor = this.cursor;\n      return cursor.close(err => {\n        this._endStream();\n        this.cursor = undefined;\n        return cb(err);\n      });\n    });\n  }\n\n  /**\n   * Return a modified Readable stream including a possible transform method.\n   * @throws MongoDriverError if this.cursor is undefined\n   */\n  stream(options?: CursorStreamOptions): Readable & AsyncIterable<TChange> {\n    this.streamOptions = options;\n    if (!this.cursor) throw new MongoChangeStreamError(NO_CURSOR_ERROR);\n    return this.cursor.stream(options);\n  }\n\n  /**\n   * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n   */\n  tryNext(): Promise<Document | null>;\n  tryNext(callback: Callback<Document | null>): void;\n  tryNext(callback?: Callback<Document | null>): Promise<Document | null> | void {\n    this._setIsIterator();\n    return maybePromise(callback, cb => {\n      this._getCursor((err, cursor) => {\n        if (err || !cursor) return cb(err); // failed to resume, raise an error\n        return cursor.tryNext(cb);\n      });\n    });\n  }\n\n  /** @internal */\n  private _setIsEmitter(): void {\n    if (this[kMode] === 'iterator') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new MongoAPIError(\n        'ChangeStream cannot be used as an EventEmitter after being used as an iterator'\n      );\n    }\n    this[kMode] = 'emitter';\n  }\n\n  /** @internal */\n  private _setIsIterator(): void {\n    if (this[kMode] === 'emitter') {\n      // TODO(NODE-3485): Replace with MongoChangeStreamModeError\n      throw new MongoAPIError(\n        'ChangeStream cannot be used as an iterator after being used as an EventEmitter'\n      );\n    }\n    this[kMode] = 'iterator';\n  }\n\n  /**\n   * Create a new change stream cursor based on self's configuration\n   * @internal\n   */\n  private _createChangeStreamCursor(\n    options: ChangeStreamOptions | ChangeStreamCursorOptions\n  ): ChangeStreamCursor<TSchema, TChange> {\n    const changeStreamStageOptions = filterOptions(options, CHANGE_STREAM_OPTIONS);\n    if (this.type === CHANGE_DOMAIN_TYPES.CLUSTER) {\n      changeStreamStageOptions.allChangesForCluster = true;\n    }\n    const pipeline = [{ $changeStream: changeStreamStageOptions }, ...this.pipeline];\n\n    const client: MongoClient | null =\n      this.type === CHANGE_DOMAIN_TYPES.CLUSTER\n        ? (this.parent as MongoClient)\n        : this.type === CHANGE_DOMAIN_TYPES.DATABASE\n        ? (this.parent as Db).s.client\n        : this.type === CHANGE_DOMAIN_TYPES.COLLECTION\n        ? (this.parent as Collection).s.db.s.client\n        : null;\n\n    if (client == null) {\n      // This should never happen because of the assertion in the constructor\n      throw new MongoRuntimeError(\n        `Changestream type should only be one of cluster, database, collection. Found ${this.type.toString()}`\n      );\n    }\n\n    const changeStreamCursor = new ChangeStreamCursor<TSchema, TChange>(\n      client,\n      this.namespace,\n      pipeline,\n      options\n    );\n\n    for (const event of CHANGE_STREAM_EVENTS) {\n      changeStreamCursor.on(event, e => this.emit(event, e));\n    }\n\n    if (this.listenerCount(ChangeStream.CHANGE) > 0) {\n      this._streamEvents(changeStreamCursor);\n    }\n\n    return changeStreamCursor;\n  }\n\n  /**\n   * This method performs a basic server selection loop, satisfying the requirements of\n   * ChangeStream resumability until the new SDAM layer can be used.\n   * @internal\n   */\n  private _waitForTopologyConnected(\n    topology: Topology,\n    options: TopologyWaitOptions,\n    callback: Callback\n  ) {\n    setTimeout(() => {\n      if (options && options.start == null) {\n        options.start = now();\n      }\n\n      const start = options.start || now();\n      const timeout = options.timeout || SELECTION_TIMEOUT;\n      if (topology.isConnected()) {\n        return callback();\n      }\n\n      if (calculateDurationInMs(start) > timeout) {\n        // TODO(NODE-3497): Replace with MongoNetworkTimeoutError\n        return callback(new MongoRuntimeError('Timed out waiting for connection'));\n      }\n\n      this._waitForTopologyConnected(topology, options, callback);\n    }, 500); // this is an arbitrary wait time to allow SDAM to transition\n  }\n\n  /** @internal */\n  private _closeWithError(error: AnyError, callback?: Callback): void {\n    if (!callback) {\n      this.emit(ChangeStream.ERROR, error);\n    }\n\n    this.close(() => callback && callback(error));\n  }\n\n  /** @internal */\n  private _streamEvents(cursor: ChangeStreamCursor<TSchema, TChange>): void {\n    this._setIsEmitter();\n    const stream = this[kCursorStream] ?? cursor.stream();\n    this[kCursorStream] = stream;\n    stream.on('data', change => this._processNewChange(change));\n    stream.on('error', error => this._processError(error));\n  }\n\n  /** @internal */\n  private _endStream(): void {\n    const cursorStream = this[kCursorStream];\n    if (cursorStream) {\n      ['data', 'close', 'end', 'error'].forEach(event => cursorStream.removeAllListeners(event));\n      cursorStream.destroy();\n    }\n\n    this[kCursorStream] = undefined;\n  }\n\n  /** @internal */\n  private _processNewChange(change: TChange | null, callback?: Callback<TChange>) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      if (callback) callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      return;\n    }\n\n    // a null change means the cursor has been notified, implicitly closing the change stream\n    if (change == null) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      return this._closeWithError(new MongoRuntimeError(CHANGESTREAM_CLOSED_ERROR), callback);\n    }\n\n    if (change && !change._id) {\n      return this._closeWithError(new MongoChangeStreamError(NO_RESUME_TOKEN_ERROR), callback);\n    }\n\n    // cache the resume token\n    this.cursor?.cacheResumeToken(change._id);\n\n    // wipe the startAtOperationTime if there was one so that there won't be a conflict\n    // between resumeToken and startAtOperationTime if we need to reconnect the cursor\n    this.options.startAtOperationTime = undefined;\n\n    // Return the change\n    if (!callback) return this.emit(ChangeStream.CHANGE, change);\n    return callback(undefined, change);\n  }\n\n  /** @internal */\n  private _processError(error: AnyError, callback?: Callback) {\n    const cursor = this.cursor;\n\n    // If the change stream has been closed explicitly, do not process error.\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      if (callback) callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      return;\n    }\n\n    // if the resume succeeds, continue with the new cursor\n    const resumeWithCursor = (newCursor: ChangeStreamCursor<TSchema, TChange>) => {\n      this.cursor = newCursor;\n      this._processResumeQueue();\n    };\n\n    // otherwise, raise an error and close the change stream\n    const unresumableError = (err: AnyError) => {\n      if (!callback) {\n        this.emit(ChangeStream.ERROR, err);\n      }\n\n      this.close(() => this._processResumeQueue(err));\n    };\n\n    if (cursor && isResumableError(error, maxWireVersion(cursor.server))) {\n      this.cursor = undefined;\n\n      // stop listening to all events from old cursor\n      this._endStream();\n\n      // close internal cursor, ignore errors\n      cursor.close();\n\n      const topology = getTopology(this.parent);\n      this._waitForTopologyConnected(topology, { readPreference: cursor.readPreference }, err => {\n        // if the topology can't reconnect, close the stream\n        if (err) return unresumableError(err);\n\n        // create a new cursor, preserving the old cursor's options\n        const newCursor = this._createChangeStreamCursor(cursor.resumeOptions);\n\n        // attempt to continue in emitter mode\n        if (!callback) return resumeWithCursor(newCursor);\n\n        // attempt to continue in iterator mode\n        newCursor.hasNext(err => {\n          // if there's an error immediately after resuming, close the stream\n          if (err) return unresumableError(err);\n          resumeWithCursor(newCursor);\n        });\n      });\n      return;\n    }\n\n    // if initial error wasn't resumable, raise an error and close the change stream\n    return this._closeWithError(error, callback);\n  }\n\n  /** @internal */\n  private _getCursor(callback: Callback<ChangeStreamCursor<TSchema, TChange>>) {\n    if (this[kClosed]) {\n      // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n      callback(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n      return;\n    }\n\n    // if a cursor exists and it is open, return it\n    if (this.cursor) {\n      callback(undefined, this.cursor);\n      return;\n    }\n\n    // no cursor, queue callback until topology reconnects\n    this[kResumeQueue].push(callback);\n  }\n\n  /**\n   * Drain the resume queue when a new has become available\n   * @internal\n   *\n   * @param error - error getting a new cursor\n   */\n  private _processResumeQueue(error?: Error) {\n    while (this[kResumeQueue].length) {\n      const request = this[kResumeQueue].pop();\n      if (!request) break; // Should never occur but TS can't use the length check in the while condition\n\n      if (!error) {\n        if (this[kClosed]) {\n          // TODO(NODE-3485): Replace with MongoChangeStreamClosedError\n          request(new MongoAPIError(CHANGESTREAM_CLOSED_ERROR));\n          return;\n        }\n        if (!this.cursor) {\n          request(new MongoChangeStreamError(NO_CURSOR_ERROR));\n          return;\n        }\n      }\n      request(error, this.cursor ?? undefined);\n    }\n  }\n}\n\n/** @internal */\nexport interface ChangeStreamCursorOptions extends AbstractCursorOptions {\n  startAtOperationTime?: OperationTime;\n  resumeAfter?: ResumeToken;\n  startAfter?: ResumeToken;\n  maxAwaitTimeMS?: number;\n  collation?: CollationOptions;\n  fullDocument?: string;\n}\n\n/** @internal */\nexport class ChangeStreamCursor<\n  TSchema extends Document = Document,\n  TChange extends Document = ChangeStreamDocument<TSchema>\n> extends AbstractCursor<TChange, ChangeStreamEvents> {\n  _resumeToken: ResumeToken;\n  startAtOperationTime?: OperationTime;\n  hasReceived?: boolean;\n  resumeAfter: ResumeToken;\n  startAfter: ResumeToken;\n  options: ChangeStreamCursorOptions;\n\n  postBatchResumeToken?: ResumeToken;\n  pipeline: Document[];\n\n  constructor(\n    client: MongoClient,\n    namespace: MongoDBNamespace,\n    pipeline: Document[] = [],\n    options: ChangeStreamCursorOptions = {}\n  ) {\n    super(client, namespace, options);\n\n    this.pipeline = pipeline;\n    this.options = options;\n    this._resumeToken = null;\n    this.startAtOperationTime = options.startAtOperationTime;\n\n    if (options.startAfter) {\n      this.resumeToken = options.startAfter;\n    } else if (options.resumeAfter) {\n      this.resumeToken = options.resumeAfter;\n    }\n  }\n\n  set resumeToken(token: ResumeToken) {\n    this._resumeToken = token;\n    this.emit(ChangeStream.RESUME_TOKEN_CHANGED, token);\n  }\n\n  get resumeToken(): ResumeToken {\n    return this._resumeToken;\n  }\n\n  get resumeOptions(): ChangeStreamCursorOptions {\n    const options: ChangeStreamCursorOptions = {\n      ...this.options\n    };\n\n    for (const key of ['resumeAfter', 'startAfter', 'startAtOperationTime'] as const) {\n      delete options[key];\n    }\n\n    if (this.resumeToken != null) {\n      if (this.options.startAfter && !this.hasReceived) {\n        options.startAfter = this.resumeToken;\n      } else {\n        options.resumeAfter = this.resumeToken;\n      }\n    } else if (this.startAtOperationTime != null && maxWireVersion(this.server) >= 7) {\n      options.startAtOperationTime = this.startAtOperationTime;\n    }\n\n    return options;\n  }\n\n  cacheResumeToken(resumeToken: ResumeToken): void {\n    if (this.bufferedCount() === 0 && this.postBatchResumeToken) {\n      this.resumeToken = this.postBatchResumeToken;\n    } else {\n      this.resumeToken = resumeToken;\n    }\n    this.hasReceived = true;\n  }\n\n  _processBatch(response: ChangeStreamAggregateRawResult<TChange>): void {\n    const cursor = response.cursor;\n    if (cursor.postBatchResumeToken) {\n      this.postBatchResumeToken = response.cursor.postBatchResumeToken;\n\n      const batch =\n        'firstBatch' in response.cursor ? response.cursor.firstBatch : response.cursor.nextBatch;\n      if (batch.length === 0) {\n        this.resumeToken = cursor.postBatchResumeToken;\n      }\n    }\n  }\n\n  clone(): AbstractCursor<TChange> {\n    return new ChangeStreamCursor(this.client, this.namespace, this.pipeline, {\n      ...this.cursorOptions\n    });\n  }\n\n  _initialize(session: ClientSession, callback: Callback<ExecutionResult>): void {\n    const aggregateOperation = new AggregateOperation(this.namespace, this.pipeline, {\n      ...this.cursorOptions,\n      ...this.options,\n      session\n    });\n\n    executeOperation<TODO_NODE_3286, ChangeStreamAggregateRawResult<TChange>>(\n      session.client,\n      aggregateOperation,\n      (err, response) => {\n        if (err || response == null) {\n          return callback(err);\n        }\n\n        const server = aggregateOperation.server;\n        if (\n          this.startAtOperationTime == null &&\n          this.resumeAfter == null &&\n          this.startAfter == null &&\n          maxWireVersion(server) >= 7\n        ) {\n          this.startAtOperationTime = response.operationTime;\n        }\n\n        this._processBatch(response);\n\n        this.emit(ChangeStream.INIT, response);\n        this.emit(ChangeStream.RESPONSE);\n\n        // TODO: NODE-2882\n        callback(undefined, { server, session, response });\n      }\n    );\n  }\n\n  override _getMore(batchSize: number, callback: Callback): void {\n    super._getMore(batchSize, (err, response) => {\n      if (err) {\n        return callback(err);\n      }\n\n      this._processBatch(response as TODO_NODE_3286 as ChangeStreamAggregateRawResult<TChange>);\n\n      this.emit(ChangeStream.MORE, response);\n      this.emit(ChangeStream.RESPONSE);\n      callback(err, response);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}