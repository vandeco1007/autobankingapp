{"ast":null,"code":"var events = require('events');\nvar debug = require('debug')('nodemon');\nvar util = require('util');\nvar Bus = function () {\n  events.EventEmitter.call(this);\n};\nutil.inherits(Bus, events.EventEmitter);\nvar bus = new Bus();\n\n// /*\nvar collected = {};\nbus.on('newListener', function (event) {\n  debug('bus new listener: %s (%s)', event, bus.listeners(event).length);\n  if (!collected[event]) {\n    collected[event] = true;\n    bus.on(event, function () {\n      debug('bus emit: %s', event);\n    });\n  }\n});\n\n// */\n\n// proxy process messages (if forked) to the bus\nprocess.on('message', function (event) {\n  debug('process.message(%s)', event);\n  bus.emit(event);\n});\nvar emit = bus.emit;\n\n// if nodemon was spawned via a fork, allow upstream communication\n// via process.send\nif (process.send) {\n  bus.emit = function (event, data) {\n    process.send({\n      type: event,\n      data: data\n    });\n    emit.apply(bus, arguments);\n  };\n}\nmodule.exports = bus;","map":{"version":3,"names":["events","require","debug","util","Bus","EventEmitter","call","inherits","bus","collected","on","event","listeners","length","process","emit","send","data","type","apply","arguments","module","exports"],"sources":["C:/Users/789bet/node_modules/nodemon/lib/utils/bus.js"],"sourcesContent":["var events = require('events');\nvar debug = require('debug')('nodemon');\nvar util = require('util');\n\nvar Bus = function () {\n  events.EventEmitter.call(this);\n};\n\nutil.inherits(Bus, events.EventEmitter);\n\nvar bus = new Bus();\n\n// /*\nvar collected = {};\nbus.on('newListener', function (event) {\n  debug('bus new listener: %s (%s)', event, bus.listeners(event).length);\n  if (!collected[event]) {\n    collected[event] = true;\n    bus.on(event, function () {\n      debug('bus emit: %s', event);\n    });\n  }\n});\n\n// */\n\n// proxy process messages (if forked) to the bus\nprocess.on('message', function (event) {\n  debug('process.message(%s)', event);\n  bus.emit(event);\n});\n\nvar emit = bus.emit;\n\n// if nodemon was spawned via a fork, allow upstream communication\n// via process.send\nif (process.send) {\n  bus.emit = function (event, data) {\n    process.send({ type: event, data: data });\n    emit.apply(bus, arguments);\n  };\n}\n\nmodule.exports = bus;\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC,CAAC,SAAS,CAAC;AACvC,IAAIE,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE1B,IAAIG,GAAG,GAAG,YAAY;EACpBJ,MAAM,CAACK,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC;AAChC,CAAC;AAEDH,IAAI,CAACI,QAAQ,CAACH,GAAG,EAAEJ,MAAM,CAACK,YAAY,CAAC;AAEvC,IAAIG,GAAG,GAAG,IAAIJ,GAAG,EAAE;;AAEnB;AACA,IAAIK,SAAS,GAAG,CAAC,CAAC;AAClBD,GAAG,CAACE,EAAE,CAAC,aAAa,EAAE,UAAUC,KAAK,EAAE;EACrCT,KAAK,CAAC,2BAA2B,EAAES,KAAK,EAAEH,GAAG,CAACI,SAAS,CAACD,KAAK,CAAC,CAACE,MAAM,CAAC;EACtE,IAAI,CAACJ,SAAS,CAACE,KAAK,CAAC,EAAE;IACrBF,SAAS,CAACE,KAAK,CAAC,GAAG,IAAI;IACvBH,GAAG,CAACE,EAAE,CAACC,KAAK,EAAE,YAAY;MACxBT,KAAK,CAAC,cAAc,EAAES,KAAK,CAAC;IAC9B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;;AAEA;AACAG,OAAO,CAACJ,EAAE,CAAC,SAAS,EAAE,UAAUC,KAAK,EAAE;EACrCT,KAAK,CAAC,qBAAqB,EAAES,KAAK,CAAC;EACnCH,GAAG,CAACO,IAAI,CAACJ,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF,IAAII,IAAI,GAAGP,GAAG,CAACO,IAAI;;AAEnB;AACA;AACA,IAAID,OAAO,CAACE,IAAI,EAAE;EAChBR,GAAG,CAACO,IAAI,GAAG,UAAUJ,KAAK,EAAEM,IAAI,EAAE;IAChCH,OAAO,CAACE,IAAI,CAAC;MAAEE,IAAI,EAAEP,KAAK;MAAEM,IAAI,EAAEA;IAAK,CAAC,CAAC;IACzCF,IAAI,CAACI,KAAK,CAACX,GAAG,EAAEY,SAAS,CAAC;EAC5B,CAAC;AACH;AAEAC,MAAM,CAACC,OAAO,GAAGd,GAAG"},"metadata":{},"sourceType":"script"}