{"ast":null,"code":"var parse = require('./parse');\n\n/**\n * Converts a string to command line args, in particular\n * groups together quoted values.\n * This is a utility function to allow calling nodemon as a required\n * library, but with the CLI args passed in (instead of an object).\n *\n * @param  {String} string\n * @return {Array}\n */\nfunction stringToArgs(string) {\n  var args = [];\n  var parts = string.split(' ');\n  var length = parts.length;\n  var i = 0;\n  var open = false;\n  var grouped = '';\n  var lead = '';\n  for (; i < length; i++) {\n    lead = parts[i].substring(0, 1);\n    if (lead === '\"' || lead === '\\'') {\n      open = lead;\n      grouped = parts[i].substring(1);\n    } else if (open && parts[i].slice(-1) === open) {\n      open = false;\n      grouped += ' ' + parts[i].slice(0, -1);\n      args.push(grouped);\n    } else if (open) {\n      grouped += ' ' + parts[i];\n    } else {\n      args.push(parts[i]);\n    }\n  }\n  return args;\n}\nmodule.exports = {\n  parse: function (argv) {\n    if (typeof argv === 'string') {\n      argv = stringToArgs(argv);\n    }\n    return parse(argv);\n  }\n};","map":{"version":3,"names":["parse","require","stringToArgs","string","args","parts","split","length","i","open","grouped","lead","substring","slice","push","module","exports","argv"],"sources":["C:/Users/789bet/node_modules/nodemon/lib/cli/index.js"],"sourcesContent":["var parse = require('./parse');\n\n/**\n * Converts a string to command line args, in particular\n * groups together quoted values.\n * This is a utility function to allow calling nodemon as a required\n * library, but with the CLI args passed in (instead of an object).\n *\n * @param  {String} string\n * @return {Array}\n */\nfunction stringToArgs(string) {\n  var args = [];\n\n  var parts = string.split(' ');\n  var length = parts.length;\n  var i = 0;\n  var open = false;\n  var grouped = '';\n  var lead = '';\n\n  for (; i < length; i++) {\n    lead = parts[i].substring(0, 1);\n    if (lead === '\"' || lead === '\\'') {\n      open = lead;\n      grouped = parts[i].substring(1);\n    } else if (open && parts[i].slice(-1) === open) {\n      open = false;\n      grouped += ' ' + parts[i].slice(0, -1);\n      args.push(grouped);\n    } else if (open) {\n      grouped += ' ' + parts[i];\n    } else {\n      args.push(parts[i]);\n    }\n  }\n\n  return args;\n}\n\nmodule.exports = {\n  parse: function (argv) {\n    if (typeof argv === 'string') {\n      argv = stringToArgs(argv);\n    }\n\n    return parse(argv);\n  },\n};"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,SAAS,CAAC;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAY,CAACC,MAAM,EAAE;EAC5B,IAAIC,IAAI,GAAG,EAAE;EAEb,IAAIC,KAAK,GAAGF,MAAM,CAACG,KAAK,CAAC,GAAG,CAAC;EAC7B,IAAIC,MAAM,GAAGF,KAAK,CAACE,MAAM;EACzB,IAAIC,CAAC,GAAG,CAAC;EACT,IAAIC,IAAI,GAAG,KAAK;EAChB,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,IAAI,GAAG,EAAE;EAEb,OAAOH,CAAC,GAAGD,MAAM,EAAEC,CAAC,EAAE,EAAE;IACtBG,IAAI,GAAGN,KAAK,CAACG,CAAC,CAAC,CAACI,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;IAC/B,IAAID,IAAI,KAAK,GAAG,IAAIA,IAAI,KAAK,IAAI,EAAE;MACjCF,IAAI,GAAGE,IAAI;MACXD,OAAO,GAAGL,KAAK,CAACG,CAAC,CAAC,CAACI,SAAS,CAAC,CAAC,CAAC;IACjC,CAAC,MAAM,IAAIH,IAAI,IAAIJ,KAAK,CAACG,CAAC,CAAC,CAACK,KAAK,CAAC,CAAC,CAAC,CAAC,KAAKJ,IAAI,EAAE;MAC9CA,IAAI,GAAG,KAAK;MACZC,OAAO,IAAI,GAAG,GAAGL,KAAK,CAACG,CAAC,CAAC,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACtCT,IAAI,CAACU,IAAI,CAACJ,OAAO,CAAC;IACpB,CAAC,MAAM,IAAID,IAAI,EAAE;MACfC,OAAO,IAAI,GAAG,GAAGL,KAAK,CAACG,CAAC,CAAC;IAC3B,CAAC,MAAM;MACLJ,IAAI,CAACU,IAAI,CAACT,KAAK,CAACG,CAAC,CAAC,CAAC;IACrB;EACF;EAEA,OAAOJ,IAAI;AACb;AAEAW,MAAM,CAACC,OAAO,GAAG;EACfhB,KAAK,EAAE,UAAUiB,IAAI,EAAE;IACrB,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MAC5BA,IAAI,GAAGf,YAAY,CAACe,IAAI,CAAC;IAC3B;IAEA,OAAOjB,KAAK,CAACiB,IAAI,CAAC;EACpB;AACF,CAAC"},"metadata":{},"sourceType":"script"}