{"ast":null,"code":"/*\n\nnodemon is a utility for node, and replaces the use of the executable\nnode. So the user calls `nodemon foo.js` instead.\n\nnodemon can be run in a number of ways:\n\n`nodemon` - tries to use package.json#main property to run\n`nodemon` - if no package, looks for index.js\n`nodemon app.js` - runs app.js\n`nodemon --arg app.js --apparg` - eats arg1, and runs app.js with apparg\n`nodemon --apparg` - as above, but passes apparg to package.json#main (or\n  index.js)\n`nodemon --debug app.js\n\n*/\n\nvar fs = require('fs');\nvar path = require('path');\nvar existsSync = fs.existsSync || path.existsSync;\nmodule.exports = parse;\n\n/**\n * Parses the command line arguments `process.argv` and returns the\n * nodemon options, the user script and the executable script.\n *\n * @param  {Array} full process arguments, including `node` leading arg\n * @return {Object} { options, script, args }\n */\nfunction parse(argv) {\n  if (typeof argv === 'string') {\n    argv = argv.split(' ');\n  }\n  var eat = function (i, args) {\n    if (i <= args.length) {\n      return args.splice(i + 1, 1).pop();\n    }\n  };\n  var args = argv.slice(2);\n  var script = null;\n  var nodemonOptions = {\n    scriptPosition: null\n  };\n  var nodemonOpt = nodemonOption.bind(null, nodemonOptions);\n  var lookForArgs = true;\n\n  // move forward through the arguments\n  for (var i = 0; i < args.length; i++) {\n    // if the argument looks like a file, then stop eating\n    if (!script) {\n      if (args[i] === '.' || existsSync(args[i])) {\n        script = args.splice(i, 1).pop();\n\n        // we capture the position of the script because we'll reinsert it in\n        // the right place in run.js:command (though I'm not sure we should even\n        // take it out of the array in the first place, but this solves passing\n        // arguments to the exec process for now).\n        nodemonOptions.scriptPosition = i;\n        i--;\n        continue;\n      }\n    }\n    if (lookForArgs) {\n      // respect the standard way of saying: hereafter belongs to my script\n      if (args[i] === '--') {\n        args.splice(i, 1);\n        nodemonOptions.scriptPosition = i;\n        // cycle back one argument, as we just ate this one up\n        i--;\n\n        // ignore all further nodemon arguments\n        lookForArgs = false;\n\n        // move to the next iteration\n        continue;\n      }\n      if (nodemonOpt(args[i], eat.bind(null, i, args)) !== false) {\n        args.splice(i, 1);\n        // cycle back one argument, as we just ate this one up\n        i--;\n      }\n    }\n  }\n  nodemonOptions.script = script;\n  nodemonOptions.args = args;\n  return nodemonOptions;\n}\n\n/**\n * Given an argument (ie. from process.argv), sets nodemon\n * options and can eat up the argument value\n *\n * @param {Object} options object that will be updated\n * @param {Sting} current argument from argv\n * @param {Function} the callback to eat up the next argument in argv\n * @return {Boolean} false if argument was not a nodemon arg\n */\nfunction nodemonOption(options, arg, eatNext) {\n  // line separation on purpose to help legibility\n  if (arg === '--help' || arg === '-h' || arg === '-?') {\n    var help = eatNext();\n    options.help = help ? help : true;\n  } else if (arg === '--version' || arg === '-v') {\n    options.version = true;\n  } else if (arg === '--no-update-notifier') {\n    options.noUpdateNotifier = true;\n  } else if (arg === '--spawn') {\n    options.spawn = true;\n  } else if (arg === '--dump') {\n    options.dump = true;\n  } else if (arg === '--verbose' || arg === '-V') {\n    options.verbose = true;\n  } else if (arg === '--legacy-watch' || arg === '-L') {\n    options.legacyWatch = true;\n  } else if (arg === '--polling-interval' || arg === '-P') {\n    options.pollingInterval = parseInt(eatNext(), 10);\n  } else\n    // Depricated as this is \"on\" by default\n    if (arg === '--js') {\n      options.js = true;\n    } else if (arg === '--quiet' || arg === '-q') {\n      options.quiet = true;\n    } else if (arg === '--config') {\n      options.configFile = eatNext();\n    } else if (arg === '--watch' || arg === '-w') {\n      if (!options.watch) {\n        options.watch = [];\n      }\n      options.watch.push(eatNext());\n    } else if (arg === '--ignore' || arg === '-i') {\n      if (!options.ignore) {\n        options.ignore = [];\n      }\n      options.ignore.push(eatNext());\n    } else if (arg === '--exitcrash') {\n      options.exitcrash = true;\n    } else if (arg === '--delay' || arg === '-d') {\n      options.delay = parseDelay(eatNext());\n    } else if (arg === '--exec' || arg === '-x') {\n      options.exec = eatNext();\n    } else if (arg === '--no-stdin' || arg === '-I') {\n      options.stdin = false;\n    } else if (arg === '--on-change-only' || arg === '-C') {\n      options.runOnChangeOnly = true;\n    } else if (arg === '--ext' || arg === '-e') {\n      options.ext = eatNext();\n    } else if (arg === '--no-colours' || arg === '--no-colors') {\n      options.colours = false;\n    } else if (arg === '--signal' || arg === '-s') {\n      options.signal = eatNext();\n    } else if (arg === '--cwd') {\n      options.cwd = eatNext();\n\n      // go ahead and change directory. This is primarily for nodemon tools like\n      // grunt-nodemon - we're doing this early because it will affect where the\n      // user script is searched for.\n      process.chdir(path.resolve(options.cwd));\n    } else {\n      // this means we didn't match\n      return false;\n    }\n}\n\n/**\n * Given an argument (ie. from nodemonOption()), will parse and return the\n * equivalent millisecond value or 0 if the argument cannot be parsed\n *\n * @param {String} argument value given to the --delay option\n * @return {Number} millisecond equivalent of the argument\n */\nfunction parseDelay(value) {\n  var millisPerSecond = 1000;\n  var millis = 0;\n  if (value.match(/^\\d*ms$/)) {\n    // Explicitly parse for milliseconds when using ms time specifier\n    millis = parseInt(value, 10);\n  } else {\n    // Otherwise, parse for seconds, with or without time specifier then convert\n    millis = parseFloat(value) * millisPerSecond;\n  }\n  return isNaN(millis) ? 0 : millis;\n}","map":{"version":3,"names":["fs","require","path","existsSync","module","exports","parse","argv","split","eat","i","args","length","splice","pop","slice","script","nodemonOptions","scriptPosition","nodemonOpt","nodemonOption","bind","lookForArgs","options","arg","eatNext","help","version","noUpdateNotifier","spawn","dump","verbose","legacyWatch","pollingInterval","parseInt","js","quiet","configFile","watch","push","ignore","exitcrash","delay","parseDelay","exec","stdin","runOnChangeOnly","ext","colours","signal","cwd","process","chdir","resolve","value","millisPerSecond","millis","match","parseFloat","isNaN"],"sources":["C:/Users/789bet/node_modules/nodemon/lib/cli/parse.js"],"sourcesContent":["/*\n\nnodemon is a utility for node, and replaces the use of the executable\nnode. So the user calls `nodemon foo.js` instead.\n\nnodemon can be run in a number of ways:\n\n`nodemon` - tries to use package.json#main property to run\n`nodemon` - if no package, looks for index.js\n`nodemon app.js` - runs app.js\n`nodemon --arg app.js --apparg` - eats arg1, and runs app.js with apparg\n`nodemon --apparg` - as above, but passes apparg to package.json#main (or\n  index.js)\n`nodemon --debug app.js\n\n*/\n\nvar fs = require('fs');\nvar path = require('path');\nvar existsSync = fs.existsSync || path.existsSync;\n\nmodule.exports = parse;\n\n/**\n * Parses the command line arguments `process.argv` and returns the\n * nodemon options, the user script and the executable script.\n *\n * @param  {Array} full process arguments, including `node` leading arg\n * @return {Object} { options, script, args }\n */\nfunction parse(argv) {\n  if (typeof argv === 'string') {\n    argv = argv.split(' ');\n  }\n\n  var eat = function (i, args) {\n    if (i <= args.length) {\n      return args.splice(i + 1, 1).pop();\n    }\n  };\n\n  var args = argv.slice(2);\n  var script = null;\n  var nodemonOptions = { scriptPosition: null };\n\n  var nodemonOpt = nodemonOption.bind(null, nodemonOptions);\n  var lookForArgs = true;\n\n  // move forward through the arguments\n  for (var i = 0; i < args.length; i++) {\n    // if the argument looks like a file, then stop eating\n    if (!script) {\n      if (args[i] === '.' || existsSync(args[i])) {\n        script = args.splice(i, 1).pop();\n\n        // we capture the position of the script because we'll reinsert it in\n        // the right place in run.js:command (though I'm not sure we should even\n        // take it out of the array in the first place, but this solves passing\n        // arguments to the exec process for now).\n        nodemonOptions.scriptPosition = i;\n        i--;\n        continue;\n      }\n    }\n\n    if (lookForArgs) {\n      // respect the standard way of saying: hereafter belongs to my script\n      if (args[i] === '--') {\n        args.splice(i, 1);\n        nodemonOptions.scriptPosition = i;\n        // cycle back one argument, as we just ate this one up\n        i--;\n\n        // ignore all further nodemon arguments\n        lookForArgs = false;\n\n        // move to the next iteration\n        continue;\n      }\n\n      if (nodemonOpt(args[i], eat.bind(null, i, args)) !== false) {\n        args.splice(i, 1);\n        // cycle back one argument, as we just ate this one up\n        i--;\n      }\n    }\n  }\n\n  nodemonOptions.script = script;\n  nodemonOptions.args = args;\n\n  return nodemonOptions;\n}\n\n\n/**\n * Given an argument (ie. from process.argv), sets nodemon\n * options and can eat up the argument value\n *\n * @param {Object} options object that will be updated\n * @param {Sting} current argument from argv\n * @param {Function} the callback to eat up the next argument in argv\n * @return {Boolean} false if argument was not a nodemon arg\n */\nfunction nodemonOption(options, arg, eatNext) {\n  // line separation on purpose to help legibility\n  if (arg === '--help' || arg === '-h' || arg === '-?') {\n    var help = eatNext();\n    options.help = help ? help : true;\n  } else\n\n  if (arg === '--version' || arg === '-v') {\n    options.version = true;\n  } else\n\n  if (arg === '--no-update-notifier') {\n    options.noUpdateNotifier = true;\n  } else\n\n  if (arg === '--spawn') {\n    options.spawn = true;\n  } else\n\n  if (arg === '--dump') {\n    options.dump = true;\n  } else\n\n  if (arg === '--verbose' || arg === '-V') {\n    options.verbose = true;\n  } else\n\n  if (arg === '--legacy-watch' || arg === '-L') {\n    options.legacyWatch = true;\n  } else\n\n  if (arg === '--polling-interval' || arg === '-P') {\n    options.pollingInterval = parseInt(eatNext(), 10);\n  } else\n\n  // Depricated as this is \"on\" by default\n  if (arg === '--js') {\n    options.js = true;\n  } else\n\n  if (arg === '--quiet' || arg === '-q') {\n    options.quiet = true;\n  } else\n\n  if (arg === '--config') {\n    options.configFile = eatNext();\n  } else\n\n  if (arg === '--watch' || arg === '-w') {\n    if (!options.watch) { options.watch = []; }\n    options.watch.push(eatNext());\n  } else\n\n  if (arg === '--ignore' || arg === '-i') {\n    if (!options.ignore) { options.ignore = []; }\n    options.ignore.push(eatNext());\n  } else\n\n  if (arg === '--exitcrash') {\n    options.exitcrash = true;\n  } else\n\n  if (arg === '--delay' || arg === '-d') {\n    options.delay = parseDelay(eatNext());\n  } else\n\n  if (arg === '--exec' || arg === '-x') {\n    options.exec = eatNext();\n  } else\n\n  if (arg === '--no-stdin' || arg === '-I') {\n    options.stdin = false;\n  } else\n\n  if (arg === '--on-change-only' || arg === '-C') {\n    options.runOnChangeOnly = true;\n  } else\n\n  if (arg === '--ext' || arg === '-e') {\n    options.ext = eatNext();\n  } else\n\n  if (arg === '--no-colours' || arg === '--no-colors') {\n    options.colours = false;\n  } else\n\n  if (arg === '--signal' || arg === '-s') {\n    options.signal = eatNext();\n  } else\n\n  if (arg === '--cwd') {\n    options.cwd = eatNext();\n\n    // go ahead and change directory. This is primarily for nodemon tools like\n    // grunt-nodemon - we're doing this early because it will affect where the\n    // user script is searched for.\n    process.chdir(path.resolve(options.cwd));\n  } else {\n\n    // this means we didn't match\n    return false;\n  }\n}\n\n/**\n * Given an argument (ie. from nodemonOption()), will parse and return the\n * equivalent millisecond value or 0 if the argument cannot be parsed\n *\n * @param {String} argument value given to the --delay option\n * @return {Number} millisecond equivalent of the argument\n */\nfunction parseDelay(value) {\n  var millisPerSecond = 1000;\n  var millis = 0;\n\n  if (value.match(/^\\d*ms$/)) {\n    // Explicitly parse for milliseconds when using ms time specifier\n    millis = parseInt(value, 10);\n  } else {\n    // Otherwise, parse for seconds, with or without time specifier then convert\n    millis = parseFloat(value) * millisPerSecond;\n  }\n\n  return isNaN(millis) ? 0 : millis;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}