{"ast":null,"code":"var colour = require('./colour');\nvar bus = require('./bus');\nvar required = false;\nvar useColours = true;\nvar coding = {\n  log: 'black',\n  info: 'yellow',\n  status: 'green',\n  detail: 'yellow',\n  fail: 'red',\n  error: 'red'\n};\nfunction log(type, text) {\n  var msg = '[nodemon] ' + (text || '');\n  if (useColours) {\n    msg = colour(coding[type], msg);\n  }\n\n  // always push the message through our bus, using nextTick\n  // to help testing and get _out of_ promises.\n  process.nextTick(() => {\n    bus.emit('log', {\n      type: type,\n      message: text,\n      colour: msg\n    });\n  });\n\n  // but if we're running on the command line, also echo out\n  // question: should we actually just consume our own events?\n  if (!required) {\n    if (type === 'error') {\n      console.error(msg);\n    } else {\n      console.log(msg || '');\n    }\n  }\n}\nvar Logger = function (r) {\n  if (!(this instanceof Logger)) {\n    return new Logger(r);\n  }\n  this.required(r);\n  return this;\n};\nObject.keys(coding).forEach(function (type) {\n  Logger.prototype[type] = log.bind(null, type);\n});\n\n// detail is for messages that are turned on during debug\nLogger.prototype.detail = function (msg) {\n  if (this.debug) {\n    log('detail', msg);\n  }\n};\nLogger.prototype.required = function (val) {\n  required = val;\n};\nLogger.prototype.debug = false;\nLogger.prototype._log = function (type, msg) {\n  if (required) {\n    bus.emit('log', {\n      type: type,\n      message: msg || '',\n      colour: msg || ''\n    });\n  } else if (type === 'error') {\n    console.error(msg);\n  } else {\n    console.log(msg || '');\n  }\n};\nObject.defineProperty(Logger.prototype, 'useColours', {\n  set: function (val) {\n    useColours = val;\n  },\n  get: function () {\n    return useColours;\n  }\n});\nmodule.exports = Logger;","map":{"version":3,"names":["colour","require","bus","required","useColours","coding","log","info","status","detail","fail","error","type","text","msg","process","nextTick","emit","message","console","Logger","r","Object","keys","forEach","prototype","bind","debug","val","_log","defineProperty","set","get","module","exports"],"sources":["C:/Users/789bet/node_modules/nodemon/lib/utils/log.js"],"sourcesContent":["var colour = require('./colour');\nvar bus = require('./bus');\nvar required = false;\nvar useColours = true;\n\nvar coding = {\n  log: 'black',\n  info: 'yellow',\n  status: 'green',\n  detail: 'yellow',\n  fail: 'red',\n  error: 'red',\n};\n\nfunction log(type, text) {\n  var msg = '[nodemon] ' + (text || '');\n\n  if (useColours) {\n    msg = colour(coding[type], msg);\n  }\n\n  // always push the message through our bus, using nextTick\n  // to help testing and get _out of_ promises.\n  process.nextTick(() => {\n    bus.emit('log', { type: type, message: text, colour: msg });\n  });\n\n  // but if we're running on the command line, also echo out\n  // question: should we actually just consume our own events?\n  if (!required) {\n    if (type === 'error') {\n      console.error(msg);\n    } else {\n      console.log(msg || '');\n    }\n  }\n}\n\nvar Logger = function (r) {\n  if (!(this instanceof Logger)) {\n    return new Logger(r);\n  }\n  this.required(r);\n  return this;\n};\n\nObject.keys(coding).forEach(function (type) {\n  Logger.prototype[type] = log.bind(null, type);\n});\n\n// detail is for messages that are turned on during debug\nLogger.prototype.detail = function (msg) {\n  if (this.debug) {\n    log('detail', msg);\n  }\n};\n\nLogger.prototype.required = function (val) {\n  required = val;\n};\n\nLogger.prototype.debug = false;\nLogger.prototype._log = function (type, msg) {\n  if (required) {\n    bus.emit('log', { type: type, message: msg || '', colour: msg || '' });\n  } else if (type === 'error') {\n    console.error(msg);\n  } else {\n    console.log(msg || '');\n  }\n};\n\nObject.defineProperty(Logger.prototype, 'useColours', {\n  set: function (val) {\n    useColours = val;\n  },\n  get: function () {\n    return useColours;\n  },\n});\n\nmodule.exports = Logger;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}