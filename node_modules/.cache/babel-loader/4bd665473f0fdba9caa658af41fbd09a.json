{"ast":null,"code":"var debug = require('debug')('nodemon');\nvar fs = require('fs');\nvar path = require('path');\nvar exists = fs.exists || path.exists;\nvar utils = require('../utils');\nvar rules = require('../rules');\nvar parse = require('../rules/parse');\nvar exec = require('./exec');\nvar defaults = require('./defaults');\nmodule.exports = load;\nmodule.exports.mutateExecOptions = mutateExecOptions;\nvar existsSync = fs.existsSync || path.existsSync;\nfunction findAppScript() {\n  // nodemon has been run alone, so try to read the package file\n  // or try to read the index.js file\n  if (existsSync('./index.js')) {\n    return 'index.js';\n  }\n}\n\n/**\n * Load the nodemon config, first reading the global root/nodemon.json, then\n * the local nodemon.json to the exec and then overwriting using any user\n * specified settings (i.e. from the cli)\n *\n * @param  {Object} settings user defined settings\n * @param  {Function} ready    callback that receives complete config\n */\nfunction load(settings, options, config, callback) {\n  config.loaded = [];\n  // first load the root nodemon.json\n  loadFile(options, config, utils.home, function (options) {\n    // then load the user's local configuration file\n    if (settings.configFile) {\n      options.configFile = path.resolve(settings.configFile);\n    }\n    loadFile(options, config, process.cwd(), function (options) {\n      // Then merge over with the user settings (parsed from the cli).\n      // Note that merge protects and favours existing values over new values,\n      // and thus command line arguments get priority\n      options = utils.merge(settings, options);\n\n      // legacy support\n      if (!Array.isArray(options.ignore)) {\n        options.ignore = [options.ignore];\n      }\n      if (!options.ignoreRoot) {\n        options.ignoreRoot = defaults.ignoreRoot;\n      }\n\n      // blend the user ignore and the default ignore together\n      if (options.ignoreRoot && options.ignore) {\n        if (!Array.isArray(options.ignoreRoot)) {\n          options.ignoreRoot = [options.ignoreRoot];\n        }\n        options.ignore = options.ignoreRoot.concat(options.ignore);\n      } else {\n        options.ignore = defaults.ignore.concat(options.ignore);\n      }\n\n      // add in any missing defaults\n      options = utils.merge(options, defaults);\n      if (!options.script && !options.exec) {\n        var found = findAppScript();\n        if (found) {\n          if (!options.args) {\n            options.args = [];\n          }\n          // if the script is found as a result of not being on the command\n          // line, then we move any of the pre double-dash args in execArgs\n          const n = options.scriptPosition === null ? options.args.length : options.scriptPosition;\n          options.execArgs = (options.execArgs || []).concat(options.args.splice(0, n));\n          options.scriptPosition = null;\n          options.script = found;\n        }\n      }\n      mutateExecOptions(options);\n      if (options.quiet) {\n        utils.quiet();\n      }\n      if (options.verbose) {\n        utils.debug = true;\n      }\n\n      // simplify the ready callback to be called after the rules are normalised\n      // from strings to regexp through the rules lib. Note that this gets\n      // created *after* options is overwritten twice in the lines above.\n      var ready = function (options) {\n        normaliseRules(options, callback);\n      };\n\n      // if we didn't pick up a nodemon.json file & there's no cli ignores\n      // then try loading an old style .nodemonignore file\n      if (config.loaded.length === 0) {\n        var legacy = loadLegacyIgnore.bind(null, options, config, ready);\n\n        // first try .nodemonignore, if that doesn't exist, try nodemon-ignore\n        return legacy('.nodemonignore', function () {\n          legacy('nodemon-ignore', function (options) {\n            ready(options);\n          });\n        });\n      }\n      ready(options);\n    });\n  });\n}\n\n/**\n * Loads the old style nodemonignore files which is a list of patterns\n * in a file to ignore\n *\n * @param  {Object} options    nodemon user options\n * @param  {Function} success\n * @param  {String} filename   ignore file (.nodemonignore or nodemon-ignore)\n * @param  {Function} fail     (optional) failure callback\n */\nfunction loadLegacyIgnore(options, config, success, filename, fail) {\n  var ignoreFile = path.join(process.cwd(), filename);\n  exists(ignoreFile, function (exists) {\n    if (exists) {\n      config.loaded.push(ignoreFile);\n      return parse(ignoreFile, function (error, rules) {\n        options.ignore = rules.raw;\n        success(options);\n      });\n    }\n    if (fail) {\n      fail(options);\n    } else {\n      success(options);\n    }\n  });\n}\nfunction normaliseRules(options, ready) {\n  // convert ignore and watch options to rules/regexp\n  rules.watch.add(options.watch);\n  rules.ignore.add(options.ignore);\n\n  // normalise the watch and ignore arrays\n  options.watch = options.watch === false ? false : rules.rules.watch;\n  options.ignore = rules.rules.ignore;\n  ready(options);\n}\n\n/**\n * Looks for a config in the current working directory, and a config in the\n * user's home directory, merging the two together, giving priority to local\n * config. This can then be overwritten later by command line arguments\n *\n * @param  {Function} ready callback to pass loaded settings to\n */\nfunction loadFile(options, config, dir, ready) {\n  if (!ready) {\n    ready = function () {};\n  }\n  var callback = function (settings) {\n    // prefer the local nodemon.json and fill in missing items using\n    // the global options\n    ready(utils.merge(settings, options));\n  };\n  if (!dir) {\n    return callback({});\n  }\n  var filename = options.configFile || path.join(dir, 'nodemon.json');\n  if (config.loaded.indexOf(filename) !== -1) {\n    // don't bother re-parsing the same config file\n    return callback({});\n  }\n  fs.readFile(filename, 'utf8', function (err, data) {\n    if (err) {\n      if (err.code === 'ENOENT') {\n        if (!options.configFile && dir !== utils.home) {\n          // if no specified local config file and local nodemon.json\n          // doesn't exist, try the package.json\n          return loadPackageJSON(config, callback);\n        }\n      }\n      return callback({});\n    }\n    var settings = {};\n    try {\n      settings = JSON.parse(data.toString('utf8').replace(/^\\uFEFF/, ''));\n      if (!filename.endsWith('package.json') || settings.nodemonConfig) {\n        config.loaded.push(filename);\n      }\n    } catch (e) {\n      utils.log.fail('Failed to parse config ' + filename);\n      console.error(e);\n      process.exit(1);\n    }\n\n    // options values will overwrite settings\n    callback(settings);\n  });\n}\nfunction loadPackageJSON(config, ready) {\n  if (!ready) {\n    ready = () => {};\n  }\n  const dir = process.cwd();\n  const filename = path.join(dir, 'package.json');\n  const packageLoadOptions = {\n    configFile: filename\n  };\n  return loadFile(packageLoadOptions, config, dir, settings => {\n    ready(settings.nodemonConfig || {});\n  });\n}\nfunction mutateExecOptions(options) {\n  // work out the execOptions based on the final config we have\n  options.execOptions = exec({\n    script: options.script,\n    exec: options.exec,\n    args: options.args,\n    scriptPosition: options.scriptPosition,\n    nodeArgs: options.nodeArgs,\n    execArgs: options.execArgs,\n    ext: options.ext,\n    env: options.env\n  }, options.execMap);\n\n  // clean up values that we don't need at the top level\n  delete options.scriptPosition;\n  delete options.script;\n  delete options.args;\n  delete options.ext;\n  return options;\n}","map":{"version":3,"names":["debug","require","fs","path","exists","utils","rules","parse","exec","defaults","module","exports","load","mutateExecOptions","existsSync","findAppScript","settings","options","config","callback","loaded","loadFile","home","configFile","resolve","process","cwd","merge","Array","isArray","ignore","ignoreRoot","concat","script","found","args","n","scriptPosition","length","execArgs","splice","quiet","verbose","ready","normaliseRules","legacy","loadLegacyIgnore","bind","success","filename","fail","ignoreFile","join","push","error","raw","watch","add","dir","indexOf","readFile","err","data","code","loadPackageJSON","JSON","toString","replace","endsWith","nodemonConfig","e","log","console","exit","packageLoadOptions","execOptions","nodeArgs","ext","env","execMap"],"sources":["C:/Users/789bet/node_modules/nodemon/lib/config/load.js"],"sourcesContent":["var debug = require('debug')('nodemon');\nvar fs = require('fs');\nvar path = require('path');\nvar exists = fs.exists || path.exists;\nvar utils = require('../utils');\nvar rules = require('../rules');\nvar parse = require('../rules/parse');\nvar exec = require('./exec');\nvar defaults = require('./defaults');\n\nmodule.exports = load;\nmodule.exports.mutateExecOptions = mutateExecOptions;\n\nvar existsSync = fs.existsSync || path.existsSync;\n\nfunction findAppScript() {\n  // nodemon has been run alone, so try to read the package file\n  // or try to read the index.js file\n  if (existsSync('./index.js')) {\n    return 'index.js';\n  }\n}\n\n/**\n * Load the nodemon config, first reading the global root/nodemon.json, then\n * the local nodemon.json to the exec and then overwriting using any user\n * specified settings (i.e. from the cli)\n *\n * @param  {Object} settings user defined settings\n * @param  {Function} ready    callback that receives complete config\n */\nfunction load(settings, options, config, callback) {\n  config.loaded = [];\n  // first load the root nodemon.json\n  loadFile(options, config, utils.home, function (options) {\n    // then load the user's local configuration file\n    if (settings.configFile) {\n      options.configFile = path.resolve(settings.configFile);\n    }\n    loadFile(options, config, process.cwd(), function (options) {\n      // Then merge over with the user settings (parsed from the cli).\n      // Note that merge protects and favours existing values over new values,\n      // and thus command line arguments get priority\n      options = utils.merge(settings, options);\n\n      // legacy support\n      if (!Array.isArray(options.ignore)) {\n        options.ignore = [options.ignore];\n      }\n\n      if (!options.ignoreRoot) {\n        options.ignoreRoot = defaults.ignoreRoot;\n      }\n\n      // blend the user ignore and the default ignore together\n      if (options.ignoreRoot && options.ignore) {\n        if (!Array.isArray(options.ignoreRoot)) {\n          options.ignoreRoot = [options.ignoreRoot];\n        }\n        options.ignore = options.ignoreRoot.concat(options.ignore);\n      } else {\n        options.ignore = defaults.ignore.concat(options.ignore);\n      }\n\n\n      // add in any missing defaults\n      options = utils.merge(options, defaults);\n\n      if (!options.script && !options.exec) {\n        var found = findAppScript();\n        if (found) {\n          if (!options.args) {\n            options.args = [];\n          }\n          // if the script is found as a result of not being on the command\n          // line, then we move any of the pre double-dash args in execArgs\n          const n = options.scriptPosition === null ?\n            options.args.length : options.scriptPosition;\n\n          options.execArgs = (options.execArgs || [])\n            .concat(options.args.splice(0, n));\n          options.scriptPosition = null;\n\n          options.script = found;\n        }\n      }\n\n      mutateExecOptions(options);\n\n      if (options.quiet) {\n        utils.quiet();\n      }\n\n      if (options.verbose) {\n        utils.debug = true;\n      }\n\n      // simplify the ready callback to be called after the rules are normalised\n      // from strings to regexp through the rules lib. Note that this gets\n      // created *after* options is overwritten twice in the lines above.\n      var ready = function (options) {\n        normaliseRules(options, callback);\n      };\n\n      // if we didn't pick up a nodemon.json file & there's no cli ignores\n      // then try loading an old style .nodemonignore file\n      if (config.loaded.length === 0) {\n        var legacy = loadLegacyIgnore.bind(null, options, config, ready);\n\n        // first try .nodemonignore, if that doesn't exist, try nodemon-ignore\n        return legacy('.nodemonignore', function () {\n          legacy('nodemon-ignore', function (options) {\n            ready(options);\n          });\n        });\n      }\n\n      ready(options);\n    });\n  });\n}\n\n/**\n * Loads the old style nodemonignore files which is a list of patterns\n * in a file to ignore\n *\n * @param  {Object} options    nodemon user options\n * @param  {Function} success\n * @param  {String} filename   ignore file (.nodemonignore or nodemon-ignore)\n * @param  {Function} fail     (optional) failure callback\n */\nfunction loadLegacyIgnore(options, config, success, filename, fail) {\n  var ignoreFile = path.join(process.cwd(), filename);\n\n  exists(ignoreFile, function (exists) {\n    if (exists) {\n      config.loaded.push(ignoreFile);\n      return parse(ignoreFile, function (error, rules) {\n        options.ignore = rules.raw;\n        success(options);\n      });\n    }\n\n    if (fail) {\n      fail(options);\n    } else {\n      success(options);\n    }\n  });\n}\n\nfunction normaliseRules(options, ready) {\n  // convert ignore and watch options to rules/regexp\n  rules.watch.add(options.watch);\n  rules.ignore.add(options.ignore);\n\n  // normalise the watch and ignore arrays\n  options.watch = options.watch === false ? false : rules.rules.watch;\n  options.ignore = rules.rules.ignore;\n\n  ready(options);\n}\n\n/**\n * Looks for a config in the current working directory, and a config in the\n * user's home directory, merging the two together, giving priority to local\n * config. This can then be overwritten later by command line arguments\n *\n * @param  {Function} ready callback to pass loaded settings to\n */\nfunction loadFile(options, config, dir, ready) {\n  if (!ready) {\n    ready = function () { };\n  }\n\n  var callback = function (settings) {\n    // prefer the local nodemon.json and fill in missing items using\n    // the global options\n    ready(utils.merge(settings, options));\n  };\n\n  if (!dir) {\n    return callback({});\n  }\n\n  var filename = options.configFile || path.join(dir, 'nodemon.json');\n\n  if (config.loaded.indexOf(filename) !== -1) {\n    // don't bother re-parsing the same config file\n    return callback({});\n  }\n\n  fs.readFile(filename, 'utf8', function (err, data) {\n    if (err) {\n      if (err.code === 'ENOENT') {\n        if (!options.configFile && dir !== utils.home) {\n          // if no specified local config file and local nodemon.json\n          // doesn't exist, try the package.json\n          return loadPackageJSON(config, callback);\n        }\n      }\n      return callback({});\n    }\n\n    var settings = {};\n\n    try {\n      settings = JSON.parse(data.toString('utf8').replace(/^\\uFEFF/, ''));\n      if (!filename.endsWith('package.json') || settings.nodemonConfig) {\n        config.loaded.push(filename);\n      }\n    } catch (e) {\n      utils.log.fail('Failed to parse config ' + filename);\n      console.error(e);\n      process.exit(1);\n    }\n\n    // options values will overwrite settings\n    callback(settings);\n  });\n}\n\nfunction loadPackageJSON(config, ready) {\n  if (!ready) {\n    ready = () => { };\n  }\n\n  const dir = process.cwd();\n  const filename = path.join(dir, 'package.json');\n  const packageLoadOptions = { configFile: filename };\n  return loadFile(packageLoadOptions, config, dir, settings => {\n    ready(settings.nodemonConfig || {});\n  });\n}\n\nfunction mutateExecOptions(options) {\n  // work out the execOptions based on the final config we have\n  options.execOptions = exec({\n    script: options.script,\n    exec: options.exec,\n    args: options.args,\n    scriptPosition: options.scriptPosition,\n    nodeArgs: options.nodeArgs,\n    execArgs: options.execArgs,\n    ext: options.ext,\n    env: options.env,\n  }, options.execMap);\n\n  // clean up values that we don't need at the top level\n  delete options.scriptPosition;\n  delete options.script;\n  delete options.args;\n  delete options.ext;\n\n  return options;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}